<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[web端渲染优化方案]]></title>
      <url>https://walid1992.github.io/2017/05/15/web%E7%AB%AF%E6%B8%B2%E6%9F%93%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>web端近年来发展十分迅速，网页在 native app 中的占比也不断增加，但H5应用的渲染方式，刷新方式与 native 应用有很大的区别。带来的问题是用户会感觉刷新慢，易卡顿，体验差，本篇博文主要针对渲染速度问题进行优化~</p>
<h1 id="渲染原理"><a href="#渲染原理" class="headerlink" title="渲染原理"></a>渲染原理</h1><p><img src="http://upload-images.jianshu.io/upload_images/2843033-08a8aac625335380.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="渲染原理图"></p>
<p>从上图可知web界面的渲染原理，这样我们就可以针对此进行优化了，先强调一下html的加载原理，我们常说的”加载是并行的，执行是串行的“的结果。html开始加载的时候，浏览器会将页面外联的css文件和js文件并行加载，如果一个文件还没回来，它后面的代码是不会执行的。</p>
<h1 id="优化渲染速度"><a href="#优化渲染速度" class="headerlink" title="优化渲染速度"></a>优化渲染速度</h1><p><strong>大概从如下几个方面进行优化：</strong></p>
<ol>
<li>采用SPA开发模式</li>
<li>采用 Virtual DOM 进行界面更新优化</li>
<li>服务端渲染</li>
<li>首屏渲染速度优化</li>
<li>懒加载</li>
<li>预加载</li>
<li>资源压缩</li>
<li>开发规范</li>
</ol>
<h2 id="SPA开发模式"><a href="#SPA开发模式" class="headerlink" title="SPA开发模式"></a>SPA开发模式</h2><p>由于传统多页模式开发，界面切换造成了频繁的网络请求，导致界面渲染效率十分低下，来自Alexander Aghassipour和Shajith Chacko发表的这篇<a href="http://techcrunch.com/2012/11/30/why-enterprise-apps-are-moving-to-single-page-design/" target="_blank" rel="external">文章</a>讲述了单页应用程序是如何创建而来的。<br>单页面应用是指用户通过浏览器加载独立的HTML页面并且无需离开此导航页面，这也是其独特的优势所在。对用户操作来说，一旦加载和执行单个页面应用程序通常会有更多的响应，这就需要返回到后端Web服务器，而单页面应用为用户提供了更接近一个本地移动或桌面应用程序的体验。</p>
<p><strong>单页Web应用程序的优点：</strong></p>
<p>首先，最大的好处是用户体验，对于内容的改动不需要加载整个页面。这样做好处颇多，因为数据层和UI的分离，可以重新编写一个原生的移动设备应用程序而不用（对原有数据服务部分）大动干戈。<br>单页面Web应用层程序最根本的优点是高效。它对服务器压力很小，消耗更少的带宽，能够与面向服务的架构更好地结合。</p>
<p><strong>单页Web应用程序的缺点：</strong></p>
<p>虽然还有一些历史遗留问题（大部分是针对HTML5的改进）以及SEO。如果你看中SEO，那就不应该在页面上使用JavaScript，你应该使用网站而不是Web应用。目前该技术还存在一些争议，但这并不是重点，因为这种类型的体系架构为SAAS Web Apps提供了一个极大的可用性。</p>
<p>单页Web应用程序的结构很简单：首先传递HTML文档框架；然后使用JavaScript修改页面；紧接着再从服务器传递更多数据然后再修改页面，如此循环。从性能的角度看，在现代浏览器中单页面Web App已经能够和普通应用程序相媲美，而且几乎所有的操作系统都支持现代的浏览器。使用HTML+CSS+Javascript编写应用程序，能使更多的人们都加入到程序开发的行列。</p>
<p>在单页开发框架中，我建议使用vue 2，下图是一些关于界面渲染相关的数据对比：</p>
<table>
<thead>
<tr>
<th>Type</th>
<th style="text-align:right">Vue 2（单位/s）</th>
<th style="text-align:right">React 15（单位/s）</th>
<th style="text-align:right">Angular 2（单位/s）</th>
</tr>
</thead>
<tbody>
<tr>
<td>create rows Duration for creating 1000 rows after the page loaded.</td>
<td style="text-align:right">171.36</td>
<td style="text-align:right">227.44</td>
<td style="text-align:right">198.06</td>
</tr>
<tr>
<td>replace all rows Duration for updating all 1000 rows of the table (with 5 warmup iterations)</td>
<td style="text-align:right">68.76</td>
<td style="text-align:right">211.71</td>
<td style="text-align:right">178.45</td>
</tr>
<tr>
<td>remove row Duration to remove a row. (with 5 warmup iterations).</td>
<td style="text-align:right">64.11</td>
<td style="text-align:right">49.42</td>
<td style="text-align:right">19.14</td>
</tr>
<tr>
<td>partial update Time to update the text of every 10th row (with 5 warmup iterations)</td>
<td style="text-align:right">22.17</td>
<td style="text-align:right">14.77</td>
<td style="text-align:right">11.42</td>
</tr>
<tr>
<td>ready memory Memory usage after page load</td>
<td style="text-align:right">3.43</td>
<td style="text-align:right">4.64</td>
<td style="text-align:right">15.45</td>
</tr>
</tbody>
</table>
<h2 id="Virtual-DOM"><a href="#Virtual-DOM" class="headerlink" title="Virtual DOM"></a>Virtual DOM</h2><p>首先强调一下，Virtual DOM 并没有提升首屏渲染速度，而且它还延长了首屏渲染速度，但是 Virtual DOM 提升的是视图局部更新的速度，能够依靠映射关系快速查找到真正的 dom 节点。</p>
<p><strong>在Virtual DOM方案中，更新浏览器的DOM分三个步骤：</strong></p>
<ol>
<li>只要数据发生改变，就会重新生成一个完整的Virtual DOM</li>
<li>重新计算比较出新的和之前的Virtual DOM的差异</li>
<li>更新真实DOM中真正发生改变的部分，就像是给DOM打了个补丁</li>
</ol>
<h2 id="服务端渲染"><a href="#服务端渲染" class="headerlink" title="服务端渲染"></a>服务端渲染</h2><p>稍后补全~</p>
<h2 id="首屏渲染速度优化"><a href="#首屏渲染速度优化" class="headerlink" title="首屏渲染速度优化"></a>首屏渲染速度优化</h2><p>做移动web页面，受移动网络网速和终端性能影响，我们经常要关注首屏内容展示时间（以下简称首屏时间）这个指标，它衡量着我们的页面是否能在用户耐心消磨完之前展示出来，很大程度影响着用户的使用满意度。</p>
<p><strong>方案：</strong></p>
<ol>
<li>三秒种渲染完成首屏指标</li>
<li>首屏加载3秒完成或使用Loading</li>
<li>基于联通3G网络平均338KB/s(2.71Mb/s)，所以首屏资源不应超过1014KB</li>
<li>所有影响首屏加载和渲染的代码应在处理逻辑中后置</li>
</ol>
<h2 id="按需加载"><a href="#按需加载" class="headerlink" title="按需加载"></a>按需加载</h2><p>将不影响首屏的资源和当前屏幕资源不用的资源放到用户需要时才加载，可以大大提升重要资源的显示速度和降低总体流量<br>PS：按需加载会导致大量重绘，影响渲染性能</p>
<ol>
<li>LazyLoad</li>
<li>滚屏加载</li>
<li>通过Media Query加载</li>
</ol>
<h2 id="预加载"><a href="#预加载" class="headerlink" title="预加载"></a>预加载</h2><p>大型重资源页面（如游戏）可使用增加Loading的方法，资源加载完成后再显示页面。但Loading时间过长，会造成用户流失<br>对用户行为分析，可以在当前页加载下一页资源，提升速度</p>
<ol>
<li>可感知Loading(如进入空间游戏的Loading)</li>
<li>不可感知的Loading（如提前加载下一页）</li>
</ol>
<h2 id="资源压缩"><a href="#资源压缩" class="headerlink" title="资源压缩"></a>资源压缩</h2><p>减少资源大小可以加快网页显示速度，所以要对HTML、CSS、JavaScript等进行代码压缩，并在服务器端设置GZip</p>
<ol>
<li>压缩（例如，多余的空格、换行符和缩进）</li>
<li>启用GZip</li>
<li>控制图片质量（使用<a href="https://tinypng.com/" target="_blank" rel="external"> tinypng </a>进行压缩）</li>
</ol>
<h2 id="开发建议"><a href="#开发建议" class="headerlink" title="开发建议"></a>开发建议</h2><h3 id="html注意事项"><a href="#html注意事项" class="headerlink" title="html注意事项"></a>html注意事项</h3><p><strong>加载是并行的:</strong></p>
<ol>
<li>别再把 JsEndTime – JsStartTime 的结果成为js文件的加载执行时间（除非你没有外联css文件），不然会被内行人取笑滴；</li>
<li>css文件的阻塞会影响后面js代码的执行，自然也包括html代码的执行，即是说此时你的页面就是空白的。所以css文件尽量内联，你可以让构建工具帮你忙；</li>
</ol>
<p><strong>执行是串行的:</strong></p>
<ol>
<li>无关紧要”的js不要放在负责渲染的js前面，这里的“无关紧要”是指和首屏渲染无关，如数据上报组件。我们可以选择将要上报的数据临时存起来，先继续执行渲染的js，等负责渲染的js执行完再加载上报组件再上报。甚至连zepto之类的库我们也可以放后面，把渲染相关的代码抽离出来并用原生js书写，放到最前面</li>
<li>可以看到，动态加载的js的执行是不会受到html后面外联的js的阻塞的影响，即是说，它的执行和后面js的执行顺序是不确定的。因此我们要小心处理好文件的依赖关系。当然还可以采用最不容易出错的方法：负责动态加载js的文件是html里面外联的最后一个文件</li>
</ol>
<h3 id="html使用Viewport"><a href="#html使用Viewport" class="headerlink" title="html使用Viewport"></a>html使用Viewport</h3><p>Viewport可以加速页面的渲染，请使用以下代码</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta <span class="built_in">name</span>=<span class="string">"viewport"</span> content=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</div></pre></td></tr></table></figure>
<h3 id="减少Dom节点"><a href="#减少Dom节点" class="headerlink" title="减少Dom节点"></a>减少Dom节点</h3><p>Dom节点太多影响页面的渲染，应尽量减少Dom节点</p>
<h3 id="减少HTTP请求"><a href="#减少HTTP请求" class="headerlink" title="减少HTTP请求"></a>减少HTTP请求</h3><p>因为手机浏览器同时响应请求为4个请求（Android支持4个，iOS 5后可支持6个），所以要尽量减少页面的请求数，首次加载同时请求数不能超过4个</p>
<ol>
<li>合并CSS、JavaScript</li>
<li>合并小图片，使用雪碧图</li>
</ol>
<h3 id="无阻塞"><a href="#无阻塞" class="headerlink" title="无阻塞"></a>无阻塞</h3><p>写在HTML头部的JavaScript（无异步），和写在HTML标签中的Style会阻塞页面的渲染，因此CSS放在页面头部并使用Link方式引入，避免在HTML标签中写Style，JavaScript放在页面尾部或使用异步方式加载</p>
<h3 id="减少Cookie"><a href="#减少Cookie" class="headerlink" title="减少Cookie"></a>减少Cookie</h3><p>Cookie会影响加载速度，所以静态资源域名不使用Cookie</p>
<h3 id="避免重定向"><a href="#避免重定向" class="headerlink" title="避免重定向"></a>避免重定向</h3><p>重定向会影响加载速度，所以在服务器正确设置避免重定向</p>
<h3 id="异步加载第三方资源"><a href="#异步加载第三方资源" class="headerlink" title="异步加载第三方资源"></a>异步加载第三方资源</h3><p>第三方资源不可控会影响页面的加载和显示，因此要异步加载第三方资源</p>
<h3 id="脚本执行优化"><a href="#脚本执行优化" class="headerlink" title="脚本执行优化"></a>脚本执行优化</h3><ol>
<li>CSS写在头部，JavaScript写在尾部或异步</li>
<li>避免图片和iFrame等的空Src（空Src会重新加载当前页面，影响速度和效率）</li>
<li>尽量避免重设图片大小（重设图片大小是指在页面、CSS、JavaScript等中多次重置图片大小，多次重设图片大小会引发图片的多次重绘，影响性能）</li>
<li>图片尽量避免使用DataURL（DataURL图片没有使用图片的压缩算法文件会变大，并且要解码后再渲染，加载慢耗时长）</li>
</ol>
]]></content>
      
        <categories>
            
            <category> Web </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Web 性能优化 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Weex基于Vue2.0开发框架搭建]]></title>
      <url>https://walid1992.github.io/2017/05/09/Weex%E5%9F%BA%E4%BA%8EVue2.0%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/2843033-43093e0a1cfdd5ce?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Weex基于Vue2.0开发框架搭建"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近有一些人反馈说在面试过程中常常被问到weex相关的知识，也侧面反映的weex的发展还是很可观的，可是目前weex的开发者大多数是中小型公司或者个人，大公司屈指可数，揪其原因可能是基于weex的开发正确的姿势大家并没有找到，而且市面上的好多轮子还是.we后缀的，众所周知，weex和vue一直在努力的进行生态互通，而且weex实现web标准化是早晚的问题，今天和大家分享一下weex基于vue2.0的开发框架模板~</p>
<h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h1><p>先简单熟悉一下weex的工作原理，这里引用一下weex官网上的一直图片，<a href="https://weex.apache.org/cn/guide/intro/how-it-works.html" target="_blank" rel="external">详细信息见官网</a></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2843033-a11114f55ceb7478.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/640" alt="Weex工作原理"></p>
<h1 id="开发环境搭建"><a href="#开发环境搭建" class="headerlink" title="开发环境搭建"></a>开发环境搭建</h1><h2 id="weex-开发环境搭建"><a href="#weex-开发环境搭建" class="headerlink" title="weex 开发环境搭建"></a>weex 开发环境搭建</h2><p><a href="https://weex.apache.org/cn/guide/set-up-env.html" target="_blank" rel="external">关于weex开发环境搭建问题见官方文档</a></p>
<h2 id="android-、iOS-开发环境"><a href="#android-、iOS-开发环境" class="headerlink" title="android 、iOS 开发环境"></a>android 、iOS 开发环境</h2><p><a href="https://weex.apache.org/cn/guide/integrate-to-your-app.html" target="_blank" rel="external">关于native开发环境搭建问题见官方文档</a></p>
<h1 id="框架说明"><a href="#框架说明" class="headerlink" title="框架说明"></a>框架说明</h1><h2 id="基于vue2-0搭建"><a href="#基于vue2-0搭建" class="headerlink" title="基于vue2.0搭建"></a>基于vue2.0搭建</h2><p>像前面说的那样weex和vue一直在努力的进行生态互通，而且weex实现web标准化是早晚的问题，所以也建议开发者不要在用.we做后缀来开发了</p>
<h2 id="native端多页模式、web端采用单页模式"><a href="#native端多页模式、web端采用单页模式" class="headerlink" title="native端多页模式、web端采用单页模式"></a>native端多页模式、web端采用单页模式</h2><ul>
<li>单页形态对于原生可能体验不够好，所以android与ios端采用多页模式</li>
<li>web端沿用spa模式标准</li>
</ul>
<h2 id="集成三端（android、ios、h5平台）"><a href="#集成三端（android、ios、h5平台）" class="headerlink" title="集成三端（android、ios、h5平台）"></a>集成三端（android、ios、h5平台）</h2><p>关于android、ios、h5平台的集成与打包问题，在项目中都以解决~</p>
<h2 id="集成eslint代码检查"><a href="#集成eslint代码检查" class="headerlink" title="集成eslint代码检查"></a>集成eslint代码检查</h2><p>代码检查是必要的操作，为了能够拥有vue开发的体验，将eslint集成进来~</p>
<h2 id="提供开源组件库OSC"><a href="#提供开源组件库OSC" class="headerlink" title="提供开源组件库OSC"></a>提供开源组件库OSC</h2><p>weex-frame提供了，开源组件库OSC，降低开发者入门门槛~</p>
<p><strong>注：</strong></p>
<p>由于weexpack暂不支持vue问题，打包相关后续会集成进来~</p>
<h1 id="框架介绍"><a href="#框架介绍" class="headerlink" title="框架介绍"></a>框架介绍</h1><h2 id="package-json依赖"><a href="#package-json依赖" class="headerlink" title="package.json依赖"></a>package.json依赖</h2><figure class="highlight xquery"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="string">"dependencies"</span>: &#123;</div><div class="line">    <span class="string">"vue"</span>: <span class="string">"^2.1.8"</span>,</div><div class="line">    <span class="string">"vue-router"</span>: <span class="string">"^2.1.1"</span>,</div><div class="line">    <span class="string">"vuex"</span>: <span class="string">"^2.1.1"</span>,</div><div class="line">    <span class="string">"vuex-router-sync"</span>: <span class="string">"^4.0.1"</span>,</div><div class="line">    <span class="string">"weex-vue-render"</span>: <span class="string">"^0.1.4"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="string">"devDependencies"</span>: &#123;</div><div class="line">    <span class="string">"babel-core"</span>: <span class="string">"^6.20.0"</span>,</div><div class="line">    <span class="string">"babel-eslint"</span>: <span class="string">"^7.1.1"</span>,</div><div class="line">    <span class="string">"babel-loader"</span>: <span class="string">"^6.2.9"</span>,</div><div class="line">    <span class="string">"babel-preset-es2015"</span>: <span class="string">"^6.18.0"</span>,</div><div class="line">    <span class="string">"css-loader"</span>: <span class="string">"^0.26.1"</span>,</div><div class="line">    <span class="string">"eslint"</span>: <span class="string">"^3.15.0"</span>,</div><div class="line">    <span class="string">"eslint-config-standard"</span>: <span class="string">"^6.2.1"</span>,</div><div class="line">    <span class="string">"eslint-loader"</span>: <span class="string">"^1.6.1"</span>,</div><div class="line">    <span class="string">"eslint-plugin-html"</span>: <span class="string">"^2.0.1"</span>,</div><div class="line">    <span class="string">"eslint-plugin-promise"</span>: <span class="string">"^3.4.2"</span>,</div><div class="line">    <span class="string">"eslint-plugin-standard"</span>: <span class="string">"^2.0.1"</span>,</div><div class="line">    <span class="string">"postcss-cssnext"</span>: <span class="string">"^2.9.0"</span>,</div><div class="line">    <span class="string">"serve"</span>: <span class="string">"^1.4.0"</span>,</div><div class="line">    <span class="string">"vue-loader"</span>: <span class="string">"^10.0.2"</span>,</div><div class="line">    <span class="string">"vue-template-compiler"</span>: <span class="string">"^2.1.8"</span>,</div><div class="line">    <span class="string">"webpack"</span>: <span class="string">"^1.14.0"</span>,</div><div class="line">    <span class="string">"weex-devtool"</span>: <span class="string">"^0.2.64"</span>,</div><div class="line">    <span class="string">"weex-loader"</span>: <span class="string">"^0.4.1"</span>,</div><div class="line">    <span class="string">"weex-vue-loader"</span>: <span class="string">"^0.2.5"</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h2 id="打包配置"><a href="#打包配置" class="headerlink" title="打包配置"></a>打包配置</h2><p>1、 遍历.vue文件后缀，生成相应的entry.js文件</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getEntryFileData</span> </span>(entryPath, vueFilePath) &#123;</div><div class="line">  const relativePath = path.relative(path.join(entryPath, <span class="string">'../'</span>), vueFilePath);</div><div class="line">  <span class="keyword">return</span> <span class="string">'let App = require("<span class="subst">$&#123;relativePath&#125;</span>")</span></div><div class="line">          // 全局注册组件</div><div class="line">          Vue.component('root<span class="string">', require("components/root"))</span></div><div class="line">          App.el = '<span class="meta">#root'</span></div><div class="line">          <span class="keyword">new</span> <span class="type">Vue</span>(App)<span class="string">'</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<p>2、通过weex-loader打包生成native jsbundle<br>3、 通过weex-vue-loader打包生成web jsbundle</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">...</div><div class="line"></div><div class="line">const webConfig = getBaseConfig()</div><div class="line">webConfig<span class="selector-class">.entry</span> = &#123;</div><div class="line">  entry: path.resolve(<span class="string">'./src/entry.js'</span>)</div><div class="line">&#125;</div><div class="line">webConfig<span class="selector-class">.output</span> = &#123;</div><div class="line">  path: <span class="string">'dist/web'</span>,</div><div class="line">  filename: <span class="string">'[name].js'</span></div><div class="line">&#125;</div><div class="line">webConfig<span class="selector-class">.module</span><span class="selector-class">.loaders</span>[<span class="number">1</span>]<span class="selector-class">.loaders</span><span class="selector-class">.push</span>(<span class="string">'vue'</span>)</div><div class="line"></div><div class="line">const weexConfig = getBaseConfig()</div><div class="line">weexConfig<span class="selector-class">.output</span><span class="selector-class">.filename</span> = <span class="string">'weex/[name].js'</span></div><div class="line">weexConfig<span class="selector-class">.module</span><span class="selector-class">.loaders</span>[<span class="number">1</span>]<span class="selector-class">.loaders</span><span class="selector-class">.push</span>(<span class="string">'weex'</span>)</div></pre></td></tr></table></figure>
<h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">weex-frame</div><div class="line">├── <span class="keyword">android </span>(<span class="keyword">android项目)</span></div><div class="line">│</div><div class="line">├── ios （ios项目代码）</div><div class="line">│</div><div class="line">├── src （weex模块）</div><div class="line">│      ├── api (api模块)</div><div class="line">│      ├── components（组件模块）</div><div class="line">│      ├── constants（常量配置）</div><div class="line">│      ├── utils （工具模块）</div><div class="line">│      └── views（视图模块）</div><div class="line">│</div><div class="line">└── <span class="keyword">dist </span>（<span class="keyword">build输出模块）</span></div><div class="line">       ├── weex (native使用<span class="keyword">jsbundle)</span></div><div class="line">       └── web（web使用<span class="keyword">jsbundle）</span></div></pre></td></tr></table></figure>
<h2 id="组件库介绍"><a href="#组件库介绍" class="headerlink" title="组件库介绍"></a>组件库介绍</h2><h3 id="osc-navbar"><a href="#osc-navbar" class="headerlink" title="osc-navbar"></a>osc-navbar</h3><blockquote>
<p>三端导航条</p>
</blockquote>
<h3 id="osc-navpage"><a href="#osc-navpage" class="headerlink" title="osc-navpage"></a>osc-navpage</h3><blockquote>
<p>三端导航页，适配iOS顶部20px问题</p>
</blockquote>
<p><strong>代码示例：</strong></p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;osc-navpage</div><div class="line">    :title=<span class="string">"title"</span></div><div class="line">    leftItemSrc=<span class="string">"https://gitlab.com/toonteam/weex/raw/ce656f79084ed9db357f8abd76c6e6c82dc5a28d/src/views/person-info/imgs/back.png"</span></div><div class="line">    rightItemSrc=<span class="string">"http://gtms02.alicdn.com/tps/i2/TB1ED7iMpXXXXXEXXXXWA_BHXXX-48-48.png"</span></div><div class="line">    <span class="meta">@naviBarLeftItemClick</span>=<span class="string">"onBack"</span></div><div class="line">    <span class="meta">@naviBarRightItemClick</span>=<span class="string">"onReload"</span>&gt;</div><div class="line">  &lt;web <span class="class"><span class="keyword">class</span></span>=<span class="symbol">'we</span>b' ref=<span class="symbol">'webvie</span>w' :src=<span class="symbol">'ur</span>l' <span class="meta">@pagestart</span>=<span class="symbol">'star</span>t' <span class="meta">@pagefinish</span>=<span class="symbol">'finis</span>h'&gt;&lt;/web&gt;</div><div class="line">&lt;/osc-navpage&gt;</div></pre></td></tr></table></figure>
<h3 id="osc-root详细示例"><a href="#osc-root详细示例" class="headerlink" title="osc-root详细示例"></a><a href="/doc/components/osc-root.md">osc-root详细示例</a></h3><blockquote>
<p>界面根view，适配iOS顶部20px问题</p>
</blockquote>
<p>代码示例：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">osc-root</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span>OsMartian Root<span class="tag">&lt;/<span class="name">text</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">osc-root</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="osc-tabbar"><a href="#osc-tabbar" class="headerlink" title="osc-tabbar"></a>osc-tabbar</h3><blockquote>
<p>底部tabbar</p>
</blockquote>
<p><strong>代码示例：</strong></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">osc-tabbar</span> <span class="attr">:tabItems</span>=<span class="string">"tabItems"</span> @<span class="attr">tabBarOnClick</span>=<span class="string">"tabBarOnClick"</span>&gt;</span><span class="tag">&lt;/<span class="name">osc-tabbar</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="osc-tabitem"><a href="#osc-tabitem" class="headerlink" title="osc-tabitem"></a>osc-tabitem</h3><blockquote>
<p>底部tabbaritem元素</p>
</blockquote>
<h2 id="项目启动"><a href="#项目启动" class="headerlink" title="项目启动"></a>项目启动</h2><ol>
<li>git clone git@github.com:osmartian/weex-frame.git</li>
<li>cd weex-frame</li>
<li>npm install</li>
<li>执行 ./start</li>
</ol>
<h3 id="android-启动"><a href="#android-启动" class="headerlink" title="android 启动"></a>android 启动</h3><ol>
<li>打开andorid studio</li>
<li>File -&gt; New -&gt; Import Project -&gt; weex-frame/android -&gt; 启动</li>
</ol>
<p>或</p>
<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="keyword">run</span><span class="bash"> dev:android</span></div></pre></td></tr></table></figure>
<h3 id="iOS-启动"><a href="#iOS-启动" class="headerlink" title="iOS 启动"></a>iOS 启动</h3><ol>
<li>cd ios</li>
<li>pod install (未安装pod，请先安装)</li>
<li>open WeexFrame.xcworkspace</li>
</ol>
<h3 id="h5-启动方式"><a href="#h5-启动方式" class="headerlink" title="h5 启动方式"></a>h5 启动方式</h3><p> 打开 <a href="http://localhost:12580/weex.html" target="_blank" rel="external">http://localhost:12580/weex.html</a></p>
<h2 id="项目示例"><a href="#项目示例" class="headerlink" title="项目示例"></a>项目示例</h2><h3 id="h5-端示例"><a href="#h5-端示例" class="headerlink" title="h5 端示例"></a>h5 端示例</h3><p><img src="http://upload-images.jianshu.io/upload_images/2843033-2c404d16e05b8f0d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320" alt="h5我的页面"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2843033-8eda0114ba0ca246.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320" alt="h5发起页面"></p>
<h3 id="android-端示例"><a href="#android-端示例" class="headerlink" title="android 端示例"></a>android 端示例</h3><p><img src="http://upload-images.jianshu.io/upload_images/2843033-26182ae64ca5171a.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/320" alt="android首页"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2843033-d1c5d7de21ce940e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/320" alt="android我的页面"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2843033-d92f0ba3f5af4372.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/320" alt="android发起页面"></p>
<h3 id="iOS-端示例"><a href="#iOS-端示例" class="headerlink" title="iOS 端示例"></a>iOS 端示例</h3><p><img src="http://upload-images.jianshu.io/upload_images/2843033-120c80bc608d0471.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320" alt="iOS首页"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2843033-95742f3b0dc964fb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320" alt="iOS我的页面"></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2843033-55bbaf814b08c429.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/320" alt="iOS发起页面"></p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>能看的出来上方的三端示例表现还是很一致的，本篇博文也是想给大家提供一个轮子，也欢迎大家多多提意见，共同促进weex生态成熟~</p>
<p>框架项目地址：</p>
<p><a href="https://github.com/SyswinAE/weex-frame" target="_blank" rel="external">https://github.com/SyswinAE/weex-frame</a></p>
<p>本文已在版权印备案，如需转载请访问版权印。53688340</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> RxJava </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RxRetrofit 网络框架解析]]></title>
      <url>https://walid1992.github.io/2016/10/24/RxRetrofit%20%E7%BD%91%E7%BB%9C%E6%A1%86%E6%9E%B6%E8%A7%A3%E6%9E%90/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/2843033-39f3c6fab45ae489?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="RxRetrofit"></p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>网络请求在项目开发中必不可少，封装的好坏很大程度上影响的项目质量，本篇博文 <a href="http://www.jianshu.com/users/a279a2f8ed63/latest_articles" target="_blank" rel="external">草民-walid</a> 与大家分享一下本人的愚见与rxretrofit框架讲解~</p>
<h1 id="劣质请求框架的表现"><a href="#劣质请求框架的表现" class="headerlink" title="劣质请求框架的表现"></a>劣质请求框架的表现</h1><p>1.与业务逻辑严重耦合<br>2.存在很多复杂冗余代码<br>3.写法不够傻瓜<br>4.请求统一处理不佳<br>  …</p>
<h1 id="rxretrofit-框架介绍"><a href="#rxretrofit-框架介绍" class="headerlink" title="rxretrofit 框架介绍"></a>rxretrofit 框架介绍</h1><h2 id="技术概要"><a href="#技术概要" class="headerlink" title="技术概要"></a>技术概要</h2><p>rxretrofit库采用了rxjava + retrofit 2.0 进行整合封装， <a href="http://www.jianshu.com/p/9d1d58e170f4" target="_blank" rel="external">retrofit2.0</a> 与 <a href="http://www.jianshu.com/p/e3c4280ce397" target="_blank" rel="external">rxjava</a> 在之前文章中都有所介绍，相信大家也都会有所了解，rxjava 与 retrofit的思想就不和大家进行过多的解读了，长话短说，我们开始吧~</p>
<h2 id="依赖module"><a href="#依赖module" class="headerlink" title="依赖module"></a>依赖module</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">dependencies</span> &#123;</div><div class="line">    <span class="comment">// ... 省略部分依赖</span></div><div class="line">    <span class="comment">// rxjava 相关库</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'io.reactivex:rxandroid:1.2.1'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'io.reactivex:rxjava:1.1.10'</span></div><div class="line">    <span class="comment">//retrofit 相关库</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.squareup.okhttp3:logging-interceptor:3.4.1'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.squareup.retrofit2:retrofit:2.1.0'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.squareup.retrofit2:converter-gson:2.1.0'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.squareup.retrofit2:adapter-rxjava:2.1.0'</span></div><div class="line">    <span class="keyword">compile</span> <span class="string">'com.google.code.gson:gson:2.7'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src="http://upload-images.jianshu.io/upload_images/2843033-10a099b3c447d4a0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Rxretrofit 框架目录结构"></p>
<p><strong>简单介绍下文件的作用，这里没有优先级，直接从上至下 ：</strong></p>
<ol>
<li>RetrofitParams ：<br>配置参数，包括超时时间、转换器、拦截器等</li>
<li>ExceptionCode ：<br>http异常代码</li>
<li>ServerResultException：<br>自定义server异常</li>
<li>ICodeVerify :<br>codehi合法校验接口，用于服务器code异常校验</li>
<li>IHttpCallback :<br>rxjava 订阅callback</li>
<li>IHttpCancelListener :<br>http 请求取消接口</li>
<li>IHttpResult :<br>http数据返回接口，统一规范</li>
<li>SimpleHttpCallback :<br>IHttpResult的实现类</li>
<li>RxRetrogitLog :<br>log 日志工具类</li>
<li>HttpManager :<br>http网络请求管理</li>
<li>HttpSubscriber :<br>http 订阅处理</li>
</ol>
<p>根据目录结构大家对项目应该有了一个整体的认识。</p>
<h2 id="代码解析"><a href="#代码解析" class="headerlink" title="代码解析"></a>代码解析</h2><p>库中的代码整体比较简单，草民这里挑出两个重要的类来进行介绍吧~</p>
<h3 id="HttpManager"><a href="#HttpManager" class="headerlink" title="HttpManager"></a>HttpManager</h3><figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Author   : walid</div><div class="line"> * Data     : 2016-08-18  15:58</div><div class="line"> * Describe : http 管理类</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HttpManager</span> &#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Retrofit retrofit;</div><div class="line">    <span class="keyword">private</span> ICodeVerify codeVerify;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HttpManager</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        RxJavaPlugins.getInstance().registerErrorHandler(<span class="keyword">new</span> RxJavaErrorHandler() &#123;</div><div class="line">            @<span class="function">Override</span></div><div class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleError</span>(<span class="params">Throwable e</span>) &#123;</div><div class="line">                RxRetrogitLog.e(<span class="string">"RxJavaPlugins Error = "</span> + e);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HttpManager <span class="title">getInstance</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> HttpManager.SingletonHolder.instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">SingletonHolder</span> &#123;</div><div class="line">        <span class="keyword">static</span> HttpManager instance = <span class="keyword">new</span> HttpManager();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">create</span>(<span class="params">String baseUrl, ICodeVerify codeVerify, RetrofitParams <span class="keyword">params</span></span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.codeVerify = codeVerify;</div><div class="line">        Converter.Factory converterFactory = <span class="keyword">params</span>.getConverterFactory();</div><div class="line">        CallAdapter.Factory callAdapterFactory = <span class="keyword">params</span>.getCallAdapterFactor();</div><div class="line">        retrofit = <span class="keyword">new</span> Retrofit.Builder().baseUrl(baseUrl)</div><div class="line">                .addConverterFactory(converterFactory != <span class="literal">null</span> ? converterFactory : GsonConverterFactory.create(<span class="keyword">new</span> GsonBuilder().create()))</div><div class="line">                .addCallAdapterFactory(callAdapterFactory != <span class="literal">null</span> ? callAdapterFactory : RxJavaCallAdapterFactory.create())</div><div class="line">                .client(createClient(<span class="keyword">params</span>))</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> OkHttpClient <span class="title">createClient</span>(<span class="params">RetrofitParams <span class="keyword">params</span></span>) </span>&#123;</div><div class="line">        OkHttpClient.Builder builder = <span class="keyword">new</span> OkHttpClient.Builder();</div><div class="line"></div><div class="line">        <span class="comment">// 设置超时</span></div><div class="line">        <span class="keyword">int</span> connectTimeoutSeconds = <span class="keyword">params</span>.getConnectTimeoutSeconds();</div><div class="line">        <span class="keyword">if</span> (connectTimeoutSeconds &gt; <span class="number">0</span>) &#123;</div><div class="line">            builder.connectTimeout(connectTimeoutSeconds, TimeUnit.SECONDS);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> readTimeoutSeconds = <span class="keyword">params</span>.getReadTimeoutSeconds();</div><div class="line">        <span class="keyword">if</span> (readTimeoutSeconds &gt; <span class="number">0</span>) &#123;</div><div class="line">            builder.readTimeout(readTimeoutSeconds, TimeUnit.SECONDS);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> writeTimeoutSeconds = <span class="keyword">params</span>.getWriteTimeoutSeconds();</div><div class="line">        <span class="keyword">if</span> (writeTimeoutSeconds &gt; <span class="number">0</span>) &#123;</div><div class="line">            builder.writeTimeout(writeTimeoutSeconds, TimeUnit.SECONDS);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// Log信息拦截器</span></div><div class="line">        builder.addInterceptor(<span class="keyword">new</span> HttpLoggingInterceptor().setLevel(HttpLoggingInterceptor.Level.BODY));</div><div class="line"></div><div class="line">        ArrayList&lt;Interceptor&gt; interceptors = <span class="keyword">params</span>.getInterceptors();</div><div class="line">        <span class="keyword">if</span> (interceptors != <span class="literal">null</span> &amp;&amp; interceptors.size() &gt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (Interceptor interceptor : interceptors) &#123;</div><div class="line">                builder.addInterceptor(interceptor);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> builder.build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;ApiType&gt; <span class="function">ApiType <span class="title">getApiService</span>(<span class="params">Class&lt;ApiType&gt; type</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> retrofit.create(type);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T, Result extends IHttpResult&lt;T&gt;&gt; <span class="function">HttpSubscriber&lt;T&gt; <span class="title">toSubscribe</span>(<span class="params">Observable&lt;Result&gt; observable, Context context, IHttpCallback&lt;T&gt; listener</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> toSubscribe(observable, <span class="keyword">new</span> HttpSubscriber&lt;&gt;(context, listener));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T, Result extends IHttpResult&lt;T&gt;&gt; <span class="function">HttpSubscriber&lt;T&gt; <span class="title">toSubscribe</span>(<span class="params">Observable&lt;Result&gt; observable, Context context, IHttpCallback&lt;T&gt; listener, boolean isShowToast</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> toSubscribe(observable, <span class="keyword">new</span> HttpSubscriber&lt;&gt;(context, listener, isShowToast));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T, Result extends IHttpResult&lt;T&gt;&gt; <span class="function">HttpSubscriber&lt;T&gt; <span class="title">toSubscribe</span>(<span class="params">Observable&lt;Result&gt; observable, HttpSubscriber&lt;T&gt; httpSubscriber</span>) </span>&#123;</div><div class="line">        Observable&lt;T&gt; observableNew = observable.map(<span class="keyword">new</span> Func1&lt;Result, T&gt;() &#123;</div><div class="line">            @<span class="function">Override</span></div><div class="line">            <span class="keyword">public</span> T <span class="title">call</span>(<span class="params">Result result</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (result == <span class="literal">null</span>) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"数据为空~"</span>);</div><div class="line">                &#125;</div><div class="line">                RxRetrogitLog.d(result.toString());</div><div class="line">                <span class="keyword">int</span> code = result.getCode();</div><div class="line">                <span class="keyword">if</span> (!codeVerify.checkValid(result.getCode())) &#123;</div><div class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> ServerResultException(code, codeVerify.formatCodeMessage(code, result.getMsg()));</div><div class="line">                &#125;</div><div class="line">                <span class="keyword">return</span> result.getData();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        observableNew.subscribeOn(Schedulers.io())</div><div class="line">                .unsubscribeOn(Schedulers.io())</div><div class="line">                .observeOn(AndroidSchedulers.mainThread())</div><div class="line">                .subscribe(httpSubscriber);</div><div class="line">        <span class="keyword">return</span> httpSubscriber;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>重要处理：</p>
<ol>
<li>create<br>rxretrofit库的初始化，建议在Application中进行初始化，通过参数可以清晰的得知，传入了baseurl、code校验与params，从而设置OkHttpClient。</li>
<li>getApiService<br>获取api的实例对象。</li>
<li>toSubscribe<br>订阅网络请求，调用此方法进行网络请求，在网络请求发起时创建了HttpSubscriber对象，进行rxjava的事件订阅，进行统一处理。</li>
</ol>
<h3 id="HttpSubscriber"><a href="#HttpSubscriber" class="headerlink" title="HttpSubscriber"></a>HttpSubscriber</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Author   : walid</div><div class="line"> * Data     : 2016-08-18  15:59</div><div class="line"> * Describe : http 观察者(订阅者)</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpSubscriber</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Subscriber</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">IHttpCancelListener</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"HttpSubscriber"</span>;</div><div class="line"></div><div class="line">    <span class="comment">//对应HTTP的状态码</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> UNAUTHORIZED = <span class="number">401</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FORBIDDEN = <span class="number">403</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> NOT_FOUND = <span class="number">404</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_TIMEOUT = <span class="number">408</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> INTERNAL_SERVER_ERROR = <span class="number">500</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BAD_GATEWAY = <span class="number">502</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SERVICE_UNAVAILABLE = <span class="number">503</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> GATEWAY_TIMEOUT = <span class="number">504</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line">    <span class="keyword">private</span> IHttpCallback&lt;T&gt; httpCallback;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> showError;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpSubscriber</span><span class="params">(Context context, IHttpCallback&lt;T&gt; httpCallback)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, httpCallback, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpSubscriber</span><span class="params">(Context context, IHttpCallback&lt;T&gt; httpCallback, <span class="keyword">boolean</span> showError)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.context = context;</div><div class="line">        <span class="keyword">this</span>.httpCallback = httpCallback;</div><div class="line">        <span class="keyword">this</span>.showError = showError;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 订阅开始时调用</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStart</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 加载成功</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(TAG, <span class="string">"onCompleted"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 对错误进行统一处理</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line"></div><div class="line">        Throwable throwable = e;</div><div class="line">        <span class="comment">//获取最根源的异常</span></div><div class="line">        <span class="keyword">while</span> (throwable.getCause() != <span class="keyword">null</span>) &#123;</div><div class="line">            e = throwable;</div><div class="line">            throwable = throwable.getCause();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//HTTP错误</span></div><div class="line">        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> HttpException) &#123;</div><div class="line">            HttpException httpException = (HttpException) e;</div><div class="line">            <span class="keyword">switch</span> (httpException.code()) &#123;</div><div class="line">                <span class="comment">//权限错误，需要实现</span></div><div class="line">                <span class="keyword">case</span> UNAUTHORIZED:</div><div class="line">                <span class="keyword">case</span> FORBIDDEN:</div><div class="line">                    callError(ExceptionCode.PERMISSION_ERROR, <span class="string">"权限错误~"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="comment">//均视为网络错误</span></div><div class="line">                <span class="keyword">case</span> NOT_FOUND:</div><div class="line">                <span class="keyword">case</span> REQUEST_TIMEOUT:</div><div class="line">                <span class="keyword">case</span> GATEWAY_TIMEOUT:</div><div class="line">                <span class="keyword">case</span> INTERNAL_SERVER_ERROR:</div><div class="line">                <span class="keyword">case</span> BAD_GATEWAY:</div><div class="line">                <span class="keyword">case</span> SERVICE_UNAVAILABLE:</div><div class="line">                <span class="keyword">default</span>:</div><div class="line">                    callError(ExceptionCode.HTTP_EXCEPTION, <span class="string">"网络错误,请检查网络后再试~"</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> JsonParseException || e <span class="keyword">instanceof</span> JSONException || e <span class="keyword">instanceof</span> ParseException) &#123;</div><div class="line">            <span class="comment">//均视为解析错误</span></div><div class="line">            callError(ExceptionCode.PARSE_ERROR, <span class="string">"数据解析异常~"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> SocketTimeoutException) &#123;</div><div class="line">            callError(ExceptionCode.SOCKET_TIMEOUT_EXCEPTION, <span class="string">"网络请求超时~"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ServerResultException) &#123;</div><div class="line">            ServerResultException apiException = (ServerResultException) e;</div><div class="line">            callError(apiException.getCode(), apiException.getMessage());</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ConnectException) &#123;</div><div class="line">            callError(ExceptionCode.CONNECT_EXCEPTION, <span class="string">"连接服务器失败~"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            callError(ExceptionCode.UNKNOWN_ERROR, <span class="string">"服务器正在开小灶,请稍后再试~"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        RxRetrogitLog.e(e.getMessage());</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">callError</span><span class="params">(<span class="keyword">int</span> code, String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (showError) &#123;</div><div class="line">            Toast.makeText(context, message, Toast.LENGTH_SHORT).show();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (httpCallback != <span class="keyword">null</span>) &#123;</div><div class="line">            httpCallback.onError(code, message);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 将onNext方法中的返回结果交给Activity或Fragment自己处理</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T t)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (httpCallback == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        httpCallback.onNext(t);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 取消ProgressDialog的时候，取消对observable的订阅，同时也取消了http请求</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCancel</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.isUnsubscribed()) &#123;</div><div class="line">            <span class="keyword">this</span>.unsubscribe();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>重要处理：</p>
<ol>
<li>onNext<br>请求成功回调callback。</li>
<li>onError<br>请求失败进行统一处理。</li>
<li>onCancel<br>对网络请求进行取消订阅，可以在activity destroy中进行取消操作。</li>
</ol>
<h1 id="rxretrofit-框架使用"><a href="#rxretrofit-框架使用" class="headerlink" title="rxretrofit 框架使用"></a>rxretrofit 框架使用</h1><p>前面说了那么多，有的人要吐槽了，bb这么多没有用的，说了半天我还不知道如何使用呢？xx个逼的，草民只是想让大家不仅仅是一个使用者，更想让大家多多的懂得其中的原理，好吧！代码我介绍的也不够完整，在此做个鬼脸，草民惭愧了，下面和大家分享重头戏，使用篇~</p>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>建议初始化在Application中~</p>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    public void onCreate() &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        <span class="comment">// LOG 日志开关</span></div><div class="line">        <span class="type">RxRetrogitLog</span>.<span class="type">DEBUG</span> = <span class="literal">true</span>;</div><div class="line">        <span class="type">RetrofitParams</span> params = <span class="keyword">new</span> <span class="type">RetrofitParams</span>();</div><div class="line">        <span class="comment">// 拦截器设置</span></div><div class="line">        <span class="type">ArrayList</span>&lt;<span class="type">Interceptor</span>&gt; interceptors = <span class="keyword">new</span> <span class="type">ArrayList</span>&lt;&gt;();</div><div class="line">        interceptors.add(<span class="keyword">new</span> <span class="type">ParamsInterceptor</span>());</div><div class="line">        params.setInterceptors(interceptors);</div><div class="line">        <span class="comment">// data 转换器</span></div><div class="line">        <span class="type">GsonBuilder</span> builder = <span class="keyword">new</span> <span class="type">GsonBuilder</span>().setDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</div><div class="line">        params.setConverterFactory(<span class="type">GsonConverterFactory</span>.create(builder.create()));</div><div class="line">        <span class="comment">// 连接超时时间</span></div><div class="line">        params.setConnectTimeoutSeconds(<span class="number">10</span>);</div><div class="line">        <span class="comment">// 读取超时时间</span></div><div class="line">        params.setReadTimeoutSeconds(<span class="number">10</span>);</div><div class="line">        <span class="comment">// 写超时时间</span></div><div class="line">        params.setWriteTimeoutSeconds(<span class="number">10</span>);</div><div class="line">        <span class="comment">// 创建httpClient</span></div><div class="line">        <span class="type">HttpManager</span>.getInstance().create(<span class="type">ApiConstants</span>.<span class="type">URL</span>, <span class="keyword">new</span> <span class="type">SeaCodeVerify</span>(), params);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="api-声明"><a href="#api-声明" class="headerlink" title="api 声明"></a>api 声明</h2><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">public</span> <span class="selector-tag">interface</span> <span class="selector-tag">IInsApi</span> &#123;</div><div class="line">    <span class="comment">// 险种 list</span></div><div class="line">    <span class="variable">@GET</span>(<span class="string">"/api/ins/list"</span>)</div><div class="line">    Observable&lt;HttpResult&lt;List&lt;InsuranceVo&gt;&gt;&gt; list(<span class="variable">@Query</span>(<span class="string">"platform"</span>) String platform);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="请求调用"><a href="#请求调用" class="headerlink" title="请求调用"></a>请求调用</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="type">TextView</span> tvContent;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> void onCreate(<span class="type">Bundle</span> savedInstanceState) &#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(<span class="type">R</span>.layout.activity_main);</div><div class="line">        tvContent = (<span class="type">TextView</span>) findViewById(<span class="type">R</span>.id.tv_content);</div><div class="line">        <span class="type">HttpManager</span> httpManager = <span class="type">HttpManager</span>.getInstance();</div><div class="line">        <span class="comment">// 发起请求</span></div><div class="line">        httpManager.toSubscribe(httpManager.getApiService(<span class="type">IInsApi</span>.<span class="keyword">class</span>).list(<span class="string">"ANDROID"</span>), <span class="keyword">this</span>, <span class="keyword">new</span> <span class="type">SimpleHttpCallback</span>&lt;<span class="type">List</span>&lt;<span class="type">InsuranceVo</span>&gt;&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            public void onNext(<span class="type">List</span>&lt;<span class="type">InsuranceVo</span>&gt; insuranceVos) &#123;</div><div class="line">                tvContent.setText(<span class="string">"Datas = \n"</span> + insuranceVos.toString());</div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="literal">true</span>);   </div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>整个框架的使用就这几个最low的步骤，这也仅仅是最low的使用方式，大家也可以参考我提供的demo的使用方式加以封装，毕竟框架封装的好坏是取决于调用是否简单，在傻瓜式代码的路上，草民还在努力，也想和大家一同成长~</p>
<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p>gitbub ：</p>
<p> <a href="https://github.com/walid1992/RxRetrofit" target="_blank" rel="external">https://github.com/walid1992/RxRetrofit</a></p>
<p>gradle  ：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.walid:rxretrofit:0.1.0'</span></div></pre></td></tr></table></figure>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>RxRetrofit的使用就简单介绍到这里，希望大家多多提意见，草民好加以完善，谢谢~</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> RxJava </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RxJava进阶四（组合类操作符）]]></title>
      <url>https://walid1992.github.io/2016/09/25/RxJava%E8%BF%9B%E9%98%B6%E5%9B%9B%EF%BC%88%E7%BB%84%E5%90%88%E7%B1%BB%E6%93%8D%E4%BD%9C%E7%AC%A6%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/2843033-168a4c26c95d0b43?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="RxJava进阶"></p>
<p><a href="http://www.jianshu.com/p/0cb521ba1e10" target="_blank" rel="external">RxJava进阶一（创建类操作符）</a><br><a href="http://www.jianshu.com/p/fafc82b579cd" target="_blank" rel="external">RxJava进阶二（转换类操作符）</a><br><a href="http://www.jianshu.com/p/bfd0b780344a" target="_blank" rel="external">RxJava进阶三（过滤类操作符）</a><br>RxJava进阶四（组合类操作符）</p>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本篇文章带着大家熟悉一下RxJava的组合类操作符，本系列文章仅是带大家认识一下这些操作符的用法，并没有对操作符进行多种形态的使用，具体的还需要大家在使用时注意~</p>
<h2 id="操作符总览"><a href="#操作符总览" class="headerlink" title="操作符总览"></a>操作符总览</h2><p>CombineLatest、Join、Merge、StartWith、Switch、Zip…</p>
<h2 id="具体使用介绍"><a href="#具体使用介绍" class="headerlink" title="具体使用介绍"></a>具体使用介绍</h2><p>####CombineLatest ##</p>
<p>当两个Observables中的任何一个发射了一个数据时，将两个Observables数据通过指定的规则进行处理，将结果进行发射~</p>
<p>代码示例：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Observable&lt;<span class="keyword">Long</span>&gt; observable1 = Observable.interval(<span class="number">0</span>, <span class="number">500</span>, TimeUnit.MILLISECONDS).take(<span class="number">3</span>);</div><div class="line">Observable&lt;<span class="keyword">Long</span>&gt; observable2 = Observable.interval(<span class="number">500</span>, <span class="number">500</span>, TimeUnit.MILLISECONDS).take(<span class="number">3</span>);</div><div class="line"></div><div class="line">Observable.combineLatest(observable1, observable2, <span class="keyword">new</span> Func2&lt;<span class="keyword">Long</span>, <span class="keyword">Long</span>, <span class="keyword">Long</span>&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="keyword">Long</span> <span class="keyword">call</span>(<span class="keyword">Long</span> along1, <span class="keyword">Long</span> along2) &#123;</div><div class="line">        System.out.<span class="keyword">println</span>(<span class="string">"along1 --&gt; "</span> + along1);</div><div class="line">        System.out.<span class="keyword">println</span>(<span class="string">"along2 --&gt; "</span> + along2);</div><div class="line">        <span class="keyword">return</span> along1 + along2;</div><div class="line">    &#125;</div><div class="line">&#125;).subscribe(<span class="keyword">new</span> Action1&lt;<span class="keyword">Long</span>&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">call</span>(<span class="keyword">Long</span> aLong) &#123;</div><div class="line">        System.out.<span class="keyword">println</span>(<span class="string">"result = "</span> + aLong);</div><div class="line">        System.out.<span class="keyword">println</span>(<span class="string">"--------------"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">00</span>:<span class="number">12.319</span> <span class="number">6650</span>-<span class="number">6698</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: along1 --&gt; <span class="number">1</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">00</span>:<span class="number">12.319</span> <span class="number">6650</span>-<span class="number">6698</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: along2 --&gt; <span class="number">0</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">00</span>:<span class="number">12.319</span> <span class="number">6650</span>-<span class="number">6698</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: result = <span class="number">1</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">00</span>:<span class="number">12.319</span> <span class="number">6650</span>-<span class="number">6698</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: --------------</div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">00</span>:<span class="number">12.816</span> <span class="number">6650</span>-<span class="number">6728</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: along1 --&gt; <span class="number">2</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">00</span>:<span class="number">12.816</span> <span class="number">6650</span>-<span class="number">6728</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: along2 --&gt; <span class="number">0</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">00</span>:<span class="number">12.816</span> <span class="number">6650</span>-<span class="number">6728</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: result = <span class="number">2</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">00</span>:<span class="number">12.817</span> <span class="number">6650</span>-<span class="number">6728</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: --------------</div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">00</span>:<span class="number">12.818</span> <span class="number">6650</span>-<span class="number">6698</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: along1 --&gt; <span class="number">2</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">00</span>:<span class="number">12.820</span> <span class="number">6650</span>-<span class="number">6698</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: along2 --&gt; <span class="number">1</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">00</span>:<span class="number">12.821</span> <span class="number">6650</span>-<span class="number">6698</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: result = <span class="number">3</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">00</span>:<span class="number">12.821</span> <span class="number">6650</span>-<span class="number">6698</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: --------------</div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">00</span>:<span class="number">13.315</span> <span class="number">6650</span>-<span class="number">6698</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: along1 --&gt; <span class="number">2</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">00</span>:<span class="number">13.315</span> <span class="number">6650</span>-<span class="number">6698</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: along2 --&gt; <span class="number">2</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">00</span>:<span class="number">13.315</span> <span class="number">6650</span>-<span class="number">6698</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: result = <span class="number">4</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">00</span>:<span class="number">13.315</span> <span class="number">6650</span>-<span class="number">6698</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: --------------</div></pre></td></tr></table></figure>
<p><strong>结论：</strong></p>
<p><strong> 1.只有当两个observable都发射过第一项数据时，才能进行组合发射</strong></p>
<p>从log日志来看，observable1打印的第一项数据为1，所以可以推断observable1发射的0数据时，observable2并没有发射过数据，所以并没有进行组合。</p>
<p><strong> 2.当observable1与observable2都发射首个数据后，在此发射任何数据都会找相应的另外一个observable的最新数据进行组合发射</strong></p>
<h4 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h4><p>无论何时，如果一个Observable发射了一个数据项，只要在另一个Observable发射的数据项定义的<strong>时间窗口内</strong>，就将两个Observable发射的数据合并发射~</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">Observable&lt;<span class="keyword">Long</span>&gt; observable1 = Observable.interval(<span class="number">2000</span>, <span class="number">1000</span>, TimeUnit.MILLISECONDS).take(<span class="number">3</span>);</div><div class="line">Observable&lt;<span class="keyword">Long</span>&gt; observable2 = Observable.interval(<span class="number">2500</span>, <span class="number">1000</span>, TimeUnit.MILLISECONDS).take(<span class="number">3</span>);</div><div class="line"></div><div class="line">observable1</div><div class="line">        .<span class="keyword">join</span>(</div><div class="line">                observable2,</div><div class="line">                <span class="keyword">new</span> Func1&lt;<span class="keyword">Long</span>, Observable&lt;<span class="keyword">Long</span>&gt;&gt;() &#123;</div><div class="line">                    @Override</div><div class="line">                    <span class="keyword">public</span> Observable&lt;<span class="keyword">Long</span>&gt; <span class="keyword">call</span>(<span class="keyword">Long</span> aLong) &#123;</div><div class="line">                        <span class="comment">//使Observable延迟500毫秒执行</span></div><div class="line">                        System.out.<span class="keyword">println</span>(<span class="string">"observable1 -- &gt;"</span> + aLong);</div><div class="line">                        <span class="keyword">return</span> Observable.just(aLong).delay(<span class="number">500</span>, TimeUnit.MILLISECONDS);</div><div class="line">                    &#125;</div><div class="line">                &#125;,</div><div class="line">                <span class="keyword">new</span> Func1&lt;<span class="keyword">Long</span>, Observable&lt;<span class="keyword">Long</span>&gt;&gt;() &#123;</div><div class="line">                    @Override</div><div class="line">                    <span class="keyword">public</span> Observable&lt;<span class="keyword">Long</span>&gt; <span class="keyword">call</span>(<span class="keyword">Long</span> aLong) &#123;</div><div class="line">                        System.out.<span class="keyword">println</span>(<span class="string">"observable2 -- &gt;"</span> + aLong);</div><div class="line">                        <span class="keyword">return</span> Observable.just(aLong).delay(<span class="number">500</span>, TimeUnit.MILLISECONDS);</div><div class="line">                    &#125;</div><div class="line">                &#125;,</div><div class="line">                <span class="keyword">new</span> Func2&lt;<span class="keyword">Long</span>, <span class="keyword">Long</span>, <span class="keyword">Long</span>&gt;() &#123;</div><div class="line">                    @Override</div><div class="line">                    <span class="keyword">public</span> <span class="keyword">Long</span> <span class="keyword">call</span>(<span class="keyword">Long</span> aLong1, <span class="keyword">Long</span> aLong2) &#123;</div><div class="line">                        System.out.<span class="keyword">println</span>(<span class="string">"aLong1 = "</span> + aLong1);</div><div class="line">                        System.out.<span class="keyword">println</span>(<span class="string">"aLong2 = "</span> + aLong2);</div><div class="line">                        <span class="keyword">return</span> aLong1 + aLong2;</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;<span class="keyword">Long</span>&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">call</span>(<span class="keyword">Long</span> aLong) &#123;</div><div class="line">                System.out.<span class="keyword">println</span>(<span class="string">"result = "</span> + aLong);</div><div class="line">                System.out.<span class="keyword">println</span>(<span class="string">"--------------"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">56.988</span> <span class="number">20959</span>-<span class="number">21011</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: observable1 -- &gt;<span class="number">0</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">57.488</span> <span class="number">20959</span>-<span class="number">21041</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: observable2 -- &gt;<span class="number">0</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">57.488</span> <span class="number">20959</span>-<span class="number">21041</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: aLong1 = <span class="number">0</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">57.488</span> <span class="number">20959</span>-<span class="number">21041</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: aLong2 = <span class="number">0</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">57.488</span> <span class="number">20959</span>-<span class="number">21041</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: result = <span class="number">0</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">57.488</span> <span class="number">20959</span>-<span class="number">21041</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: --------------</div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">57.991</span> <span class="number">20959</span>-<span class="number">21011</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: observable1 -- &gt;<span class="number">1</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">57.991</span> <span class="number">20959</span>-<span class="number">21011</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: aLong1 = <span class="number">1</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">57.991</span> <span class="number">20959</span>-<span class="number">21011</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: aLong2 = <span class="number">0</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">57.991</span> <span class="number">20959</span>-<span class="number">21011</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: result = <span class="number">1</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">57.991</span> <span class="number">20959</span>-<span class="number">21011</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: --------------</div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">58.490</span> <span class="number">20959</span>-<span class="number">21041</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: observable2 -- &gt;<span class="number">1</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">58.490</span> <span class="number">20959</span>-<span class="number">21041</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: aLong1 = <span class="number">1</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">58.490</span> <span class="number">20959</span>-<span class="number">21041</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: aLong2 = <span class="number">1</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">58.490</span> <span class="number">20959</span>-<span class="number">21041</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: result = <span class="number">2</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">58.490</span> <span class="number">20959</span>-<span class="number">21041</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: --------------</div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">58.990</span> <span class="number">20959</span>-<span class="number">21011</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: observable1 -- &gt;<span class="number">2</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">58.990</span> <span class="number">20959</span>-<span class="number">21011</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: aLong1 = <span class="number">2</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">58.990</span> <span class="number">20959</span>-<span class="number">21011</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: aLong2 = <span class="number">1</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">58.990</span> <span class="number">20959</span>-<span class="number">21011</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: result = <span class="number">3</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">58.990</span> <span class="number">20959</span>-<span class="number">21011</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: --------------</div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">59.489</span> <span class="number">20959</span>-<span class="number">21041</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: observable2 -- &gt;<span class="number">2</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">59.489</span> <span class="number">20959</span>-<span class="number">21041</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: aLong1 = <span class="number">2</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">59.489</span> <span class="number">20959</span>-<span class="number">21041</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: aLong2 = <span class="number">2</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">59.489</span> <span class="number">20959</span>-<span class="number">21041</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: result = <span class="number">4</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">16</span>:<span class="number">47</span>:<span class="number">59.489</span> <span class="number">20959</span>-<span class="number">21041</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: --------------</div></pre></td></tr></table></figure>
<p><strong>结论：</strong></p>
<p><strong> 1.只有当两个observable都发射过第一项数据时，才能进行组合发射</strong></p>
<p>从log日志来看，observable1发射数据0时，组合的call方法并没有被执行，而当observable2发射数据0后，组合call方法被回调了。</p>
<p><strong> 2.当observable1与observable2都发射首个数据后，在此发射任何数据都会找相应的另外一个observable的最新数据进行组合发射</strong></p>
<p>####Merge##</p>
<p>将两个Observable发射的数据按照时间顺序进行组合，合并成一个Observable进行发射~</p>
<p>代码示例：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">Observable&lt;<span class="built_in">String</span>&gt; observable1 = Observable.interval(<span class="number">0</span>, <span class="number">500</span>, TimeUnit.MILLISECONDS).take(<span class="number">3</span>).flatMap(<span class="keyword">new</span> Func1&lt;Long, Observable&lt;<span class="built_in">String</span>&gt;&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Observable&lt;<span class="built_in">String</span>&gt; call(Long aLong) &#123;</div><div class="line">        <span class="keyword">return</span> Observable.just(<span class="string">"observable1 -- &gt;"</span> + aLong);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">Observable&lt;<span class="built_in">String</span>&gt; observable2 = Observable.interval(<span class="number">500</span>, <span class="number">500</span>, TimeUnit.MILLISECONDS).take(<span class="number">3</span>).flatMap(<span class="keyword">new</span> Func1&lt;Long, Observable&lt;<span class="built_in">String</span>&gt;&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Observable&lt;<span class="built_in">String</span>&gt; call(Long aLong) &#123;</div><div class="line">        <span class="keyword">return</span> Observable.just(<span class="string">"observable2 -- &gt;"</span> + aLong);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">Observable</div><div class="line">        .merge(observable1, observable2)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;<span class="built_in">String</span>&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="built_in">void</span> call(<span class="built_in">String</span> aString) &#123;</div><div class="line">                System.out.println(<span class="string">"result = "</span> + aString);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">11</span>:<span class="number">33.696</span> <span class="number">16661</span>-<span class="number">16737</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: result = observable1 -- &gt;<span class="number">0</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">11</span>:<span class="number">34.194</span> <span class="number">16661</span>-<span class="number">16737</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: result = observable1 -- &gt;<span class="number">1</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">11</span>:<span class="number">34.198</span> <span class="number">16661</span>-<span class="number">16711</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: result = observable2 -- &gt;<span class="number">0</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">11</span>:<span class="number">34.695</span> <span class="number">16661</span>-<span class="number">16737</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: result = observable1 -- &gt;<span class="number">2</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">11</span>:<span class="number">34.698</span> <span class="number">16661</span>-<span class="number">16711</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: result = observable2 -- &gt;<span class="number">1</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">11</span>:<span class="number">35.196</span> <span class="number">16661</span>-<span class="number">16711</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: result = observable2 -- &gt;<span class="number">2</span></div></pre></td></tr></table></figure>
<p>####StartWith##</p>
<p>在源Observable发射数据之前，先发射一个指定的数据序列或数据项~</p>
<p>代码示例：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Observable</div><div class="line">        .just(<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</div><div class="line">        .startWith(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">        .subscribe(new Action1&lt;Integer&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            public void call(Integer <span class="type">integer</span>) &#123;</div><div class="line">                System.out.println(<span class="string">"result = "</span> + <span class="type">integer</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">16</span>:<span class="number">43.077</span> <span class="number">21830</span>-<span class="number">21830</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: result = <span class="number">1</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">16</span>:<span class="number">43.078</span> <span class="number">21830</span>-<span class="number">21830</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: result = <span class="number">2</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">16</span>:<span class="number">43.078</span> <span class="number">21830</span>-<span class="number">21830</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: result = <span class="number">3</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">16</span>:<span class="number">43.078</span> <span class="number">21830</span>-<span class="number">21830</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: result = <span class="number">4</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">16</span>:<span class="number">43.078</span> <span class="number">21830</span>-<span class="number">21830</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: result = <span class="number">5</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">17</span>:<span class="number">16</span>:<span class="number">43.078</span> <span class="number">21830</span>-<span class="number">21830</span>/com<span class="selector-class">.shenghan</span><span class="selector-class">.haobaobei</span> I/System<span class="selector-class">.out</span>: result = <span class="number">6</span></div></pre></td></tr></table></figure>
<p>####switchOnNext##</p>
<p>把一组Observable转换成一个Observable，如果在同一个时间内产生两个或多个Observable产生的数据，只发射最后一个Observable产生的数据~</p>
<p>示例代码：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">Observable&lt;Observable&lt;<span class="built_in">String</span>&gt;&gt; observable = Observable.interval(<span class="number">2000</span>, <span class="number">500</span>, TimeUnit.MILLISECONDS).<span class="built_in">map</span>(<span class="literal">new</span> Func1&lt;Long, Observable&lt;<span class="built_in">String</span>&gt;&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> Observable&lt;<span class="built_in">String</span>&gt; call(Long aLongOutside) &#123;</div><div class="line">        <span class="comment">//每隔250毫秒产生一组数据（0,1,2,3,4)</span></div><div class="line">        <span class="keyword">return</span> Observable.interval(<span class="number">0</span>, <span class="number">250</span>, TimeUnit.MILLISECONDS).<span class="built_in">map</span>(<span class="literal">new</span> Func1&lt;Long, <span class="built_in">String</span>&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            <span class="keyword">public</span> <span class="built_in">String</span> call(Long aLongInside) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="string">"aLongOutside = "</span> + aLongOutside + <span class="string">"| aLongInside = "</span> + aLongInside;</div><div class="line">            &#125;</div><div class="line">        &#125;).<span class="keyword">take</span>(<span class="number">5</span>);</div><div class="line">    &#125;</div><div class="line">&#125;).<span class="keyword">take</span>(<span class="number">2</span>);</div><div class="line"></div><div class="line">Observable.switchOnNext(observable).subscribe(<span class="literal">new</span> Action1&lt;<span class="built_in">String</span>&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="literal">void</span> call(<span class="built_in">String</span> s) &#123;</div><div class="line">        System.out.println(<span class="string">"result = "</span> + s);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">18</span>:<span class="number">20</span>:<span class="number">14.605</span> <span class="number">2921</span>-<span class="number">2993</span>/<span class="keyword">com</span>.shenghan.haobaobei I/<span class="keyword">System</span>.<span class="keyword">out</span>: result = aLongOutside = <span class="number">0</span>| aLongInside = <span class="number">0</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">18</span>:<span class="number">20</span>:<span class="number">14.857</span> <span class="number">2921</span>-<span class="number">2993</span>/<span class="keyword">com</span>.shenghan.haobaobei I/<span class="keyword">System</span>.<span class="keyword">out</span>: result = aLongOutside = <span class="number">0</span>| aLongInside = <span class="number">1</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">18</span>:<span class="number">20</span>:<span class="number">15.103</span> <span class="number">2921</span>-<span class="number">3055</span>/<span class="keyword">com</span>.shenghan.haobaobei I/<span class="keyword">System</span>.<span class="keyword">out</span>: result = aLongOutside = <span class="number">1</span>| aLongInside = <span class="number">0</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">18</span>:<span class="number">20</span>:<span class="number">15.353</span> <span class="number">2921</span>-<span class="number">3055</span>/<span class="keyword">com</span>.shenghan.haobaobei I/<span class="keyword">System</span>.<span class="keyword">out</span>: result = aLongOutside = <span class="number">1</span>| aLongInside = <span class="number">1</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">18</span>:<span class="number">20</span>:<span class="number">15.604</span> <span class="number">2921</span>-<span class="number">3055</span>/<span class="keyword">com</span>.shenghan.haobaobei I/<span class="keyword">System</span>.<span class="keyword">out</span>: result = aLongOutside = <span class="number">1</span>| aLongInside = <span class="number">2</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">18</span>:<span class="number">20</span>:<span class="number">15.853</span> <span class="number">2921</span>-<span class="number">3055</span>/<span class="keyword">com</span>.shenghan.haobaobei I/<span class="keyword">System</span>.<span class="keyword">out</span>: result = aLongOutside = <span class="number">1</span>| aLongInside = <span class="number">3</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">18</span>:<span class="number">20</span>:<span class="number">16.104</span> <span class="number">2921</span>-<span class="number">3055</span>/<span class="keyword">com</span>.shenghan.haobaobei I/<span class="keyword">System</span>.<span class="keyword">out</span>: result = aLongOutside = <span class="number">1</span>| aLongInside = <span class="number">4</span></div></pre></td></tr></table></figure>
<p>####Zip##</p>
<p>使用一个指定的函数将多个Observable发射的数据组合在一起，然后将这个函数的结果作为单项数据发射，严格周期顺序进行合并，不能单独发射~</p>
<p>示例代码：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">Observable&lt;<span class="built_in">String</span>&gt; observable1 = Observable.just(<span class="string">"walid - 1"</span>, <span class="string">"walid - 2"</span>, <span class="string">"walid - 3"</span>);</div><div class="line">Observable&lt;<span class="built_in">String</span>&gt; observable2 = Observable.just(<span class="string">"Jordan - 1"</span>, <span class="string">"Jordan - 2"</span>, <span class="string">"Jordan - 3"</span>, <span class="string">"Jordan - 4"</span>);</div><div class="line">Observable.zip(observable1, observable2, <span class="keyword">new</span> Func2&lt;<span class="built_in">String</span>, <span class="built_in">String</span>, <span class="built_in">String</span>&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">String</span> call(<span class="built_in">String</span> s1, <span class="built_in">String</span> s2) &#123;</div><div class="line">        <span class="keyword">return</span> s1 + <span class="string">" | "</span> + s2;</div><div class="line">    &#125;</div><div class="line">&#125;).subscribe(<span class="keyword">new</span> Subscriber&lt;<span class="built_in">String</span>&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">void</span> onCompleted() &#123;</div><div class="line">        System.out.println(<span class="string">"onCompleted"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">void</span> onError(Throwable e) &#123;</div><div class="line">        System.err.println(<span class="string">"onError"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">void</span> onNext(<span class="built_in">String</span> value) &#123;</div><div class="line">        System.out.println(<span class="string">"onNext --&gt; "</span> + value);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight basic"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">18</span>:<span class="number">53</span>:<span class="number">31.772</span> <span class="number">24793</span>-<span class="number">24793</span>/<span class="keyword">com</span>.shenghan.haobaobei I/<span class="keyword">System</span>.<span class="keyword">out</span>: onNext --&gt; walid - <span class="number">1</span> | Jordan - <span class="number">1</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">18</span>:<span class="number">53</span>:<span class="number">31.772</span> <span class="number">24793</span>-<span class="number">24793</span>/<span class="keyword">com</span>.shenghan.haobaobei I/<span class="keyword">System</span>.<span class="keyword">out</span>: onNext --&gt; walid - <span class="number">2</span> | Jordan - <span class="number">2</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">18</span>:<span class="number">53</span>:<span class="number">31.772</span> <span class="number">24793</span>-<span class="number">24793</span>/<span class="keyword">com</span>.shenghan.haobaobei I/<span class="keyword">System</span>.<span class="keyword">out</span>: onNext --&gt; walid - <span class="number">3</span> | Jordan - <span class="number">3</span></div><div class="line"><span class="number">10</span>-<span class="number">08</span> <span class="number">18</span>:<span class="number">53</span>:<span class="number">31.772</span> <span class="number">24793</span>-<span class="number">24793</span>/<span class="keyword">com</span>.shenghan.haobaobei I/<span class="keyword">System</span>.<span class="keyword">out</span>: onCompleted</div></pre></td></tr></table></figure>
<p><strong>结论：</strong></p>
<p><strong> 1.只有每个observable都依次产品一轮数据时，才会统一发射一次，当不会有完整一轮数据时，视为完成</strong></p>
<p>从log日志来看，observable1产生的数据是与observable2一一对应的，也就是只有observable1与observable2同时产生数据时才会统一发射一次~</p>
<p><strong> 2.当不满足所有observable都有数据可产品时，视为完成状态</strong></p>
<p>从log日志来看，observable2最后一项数据“Jordan - 4”并没有打印，原因是observable1并没有数据可以产生了，所以不满足发射条件，视为完成状态~</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>组合类操作符，就简单介绍到这里，希望能够对同学有所帮助，谢谢~</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> RxJava </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RxJava进阶三（过滤类操作符）]]></title>
      <url>https://walid1992.github.io/2016/09/20/RxJava%E8%BF%9B%E9%98%B6%E4%B8%89%EF%BC%88%E8%BF%87%E6%BB%A4%E7%B1%BB%E6%93%8D%E4%BD%9C%E7%AC%A6%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/2843033-168a4c26c95d0b43?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="RxJava进阶"></p>
<p><a href="http://www.jianshu.com/p/0cb521ba1e10" target="_blank" rel="external">RxJava进阶一（创建类操作符）</a><br><a href="http://www.jianshu.com/p/fafc82b579cd" target="_blank" rel="external">RxJava进阶二（转换类操作符）</a><br>RxJava进阶三（过滤类操作符）<br><a href="http://www.jianshu.com/p/6a80dd6a3dfd" target="_blank" rel="external">RxJava进阶四（组合类操作符）</a></p>
<hr>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上篇文章我们了解了RXJava的转换类操作符，本篇文章带着大家熟悉一下RxJava的过滤类操作符，本系列文章仅是带大家认识一下这些操作符的用法，并没有对操作符进行多种形态的使用，具体的还需要大家在使用时注意~</p>
<h2 id="操作符总览"><a href="#操作符总览" class="headerlink" title="操作符总览"></a>操作符总览</h2><p>Debounce、Distinct、ElementAt、Filter、First、IgnoreElements、Last、Sample、Skip、SkipLast、Take、TakeLast…</p>
<h2 id="具体使用介绍"><a href="#具体使用介绍" class="headerlink" title="具体使用介绍"></a>具体使用介绍</h2><p>####Debounce ##</p>
<p>debounce操作符在源Observable产品一个结果时开始计时，如果在规定的间隔时间内没有别的结果产生或者在此期间调用了onCompleted，则发射数据，否则忽略发射。</p>
<p>代码示例：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">Observable</div><div class="line">        .create((Observable.OnSubscribe&lt;Integer&gt;) subscriber -&gt; &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                <span class="comment">//产生结果的间隔时间分别为100、200、300...900毫秒</span></div><div class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">                    subscriber.onNext(i);</div><div class="line">                    Thread.sleep(i * <span class="number">100</span>);</div><div class="line">                &#125;</div><div class="line">                subscriber.onCompleted();</div><div class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                subscriber.onError(e);</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .debounce(<span class="number">400</span>, TimeUnit.MILLISECONDS)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                System.out.println(integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2843033-ecdfb18fd7776e74?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="debounce示例"></p>
<h4 id="Distinct"><a href="#Distinct" class="headerlink" title="Distinct"></a>Distinct</h4><p>去重，过滤掉重复数据项~</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Observable</div><div class="line">        .just(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line">        .distinct()</div><div class="line">        .subscribe(new Action1&lt;<span class="keyword">Integer</span>&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            <span class="keyword">public</span> void <span class="keyword">call</span>(<span class="keyword">Integer</span> <span class="keyword">integer</span>) &#123;</div><div class="line">                System.<span class="keyword">out</span>.println(<span class="keyword">integer</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2843033-8052af254e6f3a2a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="distinct示例"></p>
<p>####ElementAt##</p>
<p>取值，取特定位置的数据项，索引是从0开始的~</p>
<p>代码示例：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Observable</div><div class="line">        .just(<span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>)</div><div class="line">        .elementAt(<span class="number">4</span>)</div><div class="line">        .subscribe(new Action1&lt;Integer&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            public void call(Integer <span class="type">integer</span>) &#123;</div><div class="line">                System.out.println(<span class="string">"onNext --&gt;"</span> + <span class="type">integer</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2843033-78bca6a1935216e6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="elementAt示例"></p>
<p>####Filter##</p>
<p>对发射的数据进行过滤，只发射符合条件的数据~</p>
<p>代码示例：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Observable</div><div class="line">        .just(<span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>)</div><div class="line">        .filter(<span class="literal">new</span> Func1&lt;<span class="built_in">Integer</span>, <span class="built_in">Boolean</span>&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            <span class="keyword">public</span> <span class="built_in">Boolean</span> call(<span class="built_in">Integer</span> <span class="built_in">integer</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="built_in">integer</span> &gt;= <span class="number">102</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribe(<span class="literal">new</span> Action1&lt;<span class="built_in">Integer</span>&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            <span class="keyword">public</span> <span class="literal">void</span> call(<span class="built_in">Integer</span> <span class="built_in">integer</span>) &#123;</div><div class="line">                System.out.println(<span class="string">"onNext --&gt;"</span> + <span class="built_in">integer</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2843033-9a9c47dfc02ae50a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="filter示例"></p>
<p>####First##</p>
<p>首项，只发射首项或满足条件的首项数据~</p>
<p>示例代码：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Observable</div><div class="line">        .just(<span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>)</div><div class="line">        .first(<span class="literal">new</span> Func1&lt;<span class="built_in">Integer</span>, <span class="built_in">Boolean</span>&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            <span class="keyword">public</span> <span class="built_in">Boolean</span> call(<span class="built_in">Integer</span> <span class="built_in">integer</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="built_in">integer</span> &gt;= <span class="number">102</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribe(<span class="literal">new</span> Action1&lt;<span class="built_in">Integer</span>&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            <span class="keyword">public</span> <span class="literal">void</span> call(<span class="built_in">Integer</span> <span class="built_in">integer</span>) &#123;</div><div class="line">                System.out.println(<span class="string">"onNext --&gt;"</span> + <span class="built_in">integer</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2843033-9a9c47dfc02ae50a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="first示例"></p>
<p>####Last##</p>
<p>末项，只发射末项或满足条件的末项数据~</p>
<p>示例代码：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Observable</div><div class="line">        .just(<span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>)</div><div class="line">        .last(<span class="literal">new</span> Func1&lt;<span class="built_in">Integer</span>, <span class="built_in">Boolean</span>&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            <span class="keyword">public</span> <span class="built_in">Boolean</span> call(<span class="built_in">Integer</span> <span class="built_in">integer</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="built_in">integer</span> &lt;= <span class="number">102</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribe(<span class="literal">new</span> Action1&lt;<span class="built_in">Integer</span>&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            <span class="keyword">public</span> <span class="literal">void</span> call(<span class="built_in">Integer</span> <span class="built_in">integer</span>) &#123;</div><div class="line">                System.out.println(<span class="string">"onNext --&gt;"</span> + <span class="built_in">integer</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2843033-4b9270553f437cce?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="last示例"></p>
<p>####IgnoreElements##</p>
<p>忽略所有数据，只保留终止通知(onError或onCompleted)~</p>
<p>示例代码：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  ignoreElements</span></div><div class="line">Observable</div><div class="line">        .just(<span class="number">100</span>, <span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>)</div><div class="line">        .ignoreElements()</div><div class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"onCompleted"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"onError"</span>);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                System.out.println(<span class="string">"onNext --&gt;"</span> + integer);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2843033-d1afc6859573a8a0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ignoreElements示例"></p>
<p>####Sample##</p>
<p>取样，定期扫描源Observable产生的数据，发射<strong>最新</strong>的数据~</p>
<p>示例代码：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Observable</div><div class="line">        .interval(<span class="number">100</span>, TimeUnit.MILLISECONDS)</div><div class="line">        .sample(<span class="number">200</span>, TimeUnit.MILLISECONDS)</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;<span class="keyword">Long</span>&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">call</span>(<span class="keyword">Long</span> aLong) &#123;</div><div class="line">                System.out.<span class="keyword">println</span>(aLong);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p>截取的部分输出结果，从输出结果可以看出，每次发射的数据都是偶数~</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2843033-b8bc2ab48657d6ad?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="sample示例"></p>
<p>####Skip##</p>
<p>跳过前面的n项数据不进行处理~</p>
<p>示例代码：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Observable</div><div class="line">        .just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line">        .<span class="keyword">skip</span>(<span class="number">2</span>)</div><div class="line">        .subscribe(<span class="literal">new</span> Action1&lt;<span class="built_in">Integer</span>&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            <span class="keyword">public</span> <span class="literal">void</span> call(<span class="built_in">Integer</span> <span class="built_in">integer</span>) &#123;</div><div class="line">                System.out.println(<span class="string">"onNext --&gt;"</span> + <span class="built_in">integer</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2843033-59fc1afc8db82e14?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="skip示例"></p>
<p>####SkipLast##</p>
<p>跳过后面的n项数据不进行处理~</p>
<p>示例代码：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Observable</div><div class="line">        .just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line">        .skipLast(<span class="number">2</span>)</div><div class="line">        .subscribe(new Action1&lt;Integer&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            public void call(Integer <span class="type">integer</span>) &#123;</div><div class="line">                System.out.println(<span class="string">"onNext --&gt;"</span> + <span class="type">integer</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2843033-8fc37a491358eb17?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="skipLast示例"></p>
<p>####Take##</p>
<p>与skip用法相反，保留前面的n项数据进行发射，而忽略后面的结果~</p>
<p>示例代码：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Observable</div><div class="line">        .just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line">        .<span class="keyword">take</span>(<span class="number">3</span>)</div><div class="line">        .subscribe(<span class="literal">new</span> Action1&lt;<span class="built_in">Integer</span>&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            <span class="keyword">public</span> <span class="literal">void</span> call(<span class="built_in">Integer</span> <span class="built_in">integer</span>) &#123;</div><div class="line">                System.out.println(<span class="string">"onNext --&gt;"</span> + <span class="built_in">integer</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2843033-8fc37a491358eb17?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="take示例"></p>
<p>####TakeLast##</p>
<p>与skipLast用法相反，只保留后面的n项数据进行发射，而忽略前面的结果~</p>
<p>示例代码：</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Observable</div><div class="line">        .just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)</div><div class="line">        .takeLast(<span class="number">3</span>)</div><div class="line">        .subscribe(new Action1&lt;Integer&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            public void call(Integer <span class="type">integer</span>) &#123;</div><div class="line">                System.out.println(<span class="string">"onNext --&gt;"</span> + <span class="type">integer</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2843033-59fc1afc8db82e14?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="takeLast示例"></p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>过滤类操作符，就简单介绍到这里，希望能够对同学有所帮助，谢谢~</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> RxJava </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RxJava进阶二（转换类操作符）]]></title>
      <url>https://walid1992.github.io/2016/09/15/RxJava%E8%BF%9B%E9%98%B6%E4%BA%8C%EF%BC%88%E8%BD%AC%E6%8D%A2%E7%B1%BB%E6%93%8D%E4%BD%9C%E7%AC%A6%EF%BC%89/</url>
      <content type="html"><![CDATA[<p><a href="http://www.jianshu.com/p/0cb521ba1e10" target="_blank" rel="external">RxJava进阶一（创建类操作符）</a><br>RxJava进阶二（转换类操作符）<br>RxJava进阶三（过滤类操作符）<br>RxJava进阶四（组合类操作符）</p>
<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面我们了解了RXJava的创建类操作符，这篇文章带着大家熟悉一下RxJava的转换类操作符，本系列文章仅是带大家认识一下这些操作符的用法，并没有对操作符进行多种形态的使用，具体的还要大家在使用时注意~</p>
<h1 id="操作符总览"><a href="#操作符总览" class="headerlink" title="操作符总览"></a>操作符总览</h1><p>Buffer、FlatMap、GroupBy、GroupBy、Map、Scan、Window…</p>
<h1 id="具体使用介绍"><a href="#具体使用介绍" class="headerlink" title="具体使用介绍"></a>具体使用介绍</h1><h2 id="Buffer"><a href="#Buffer" class="headerlink" title="Buffer"></a>Buffer</h2><p>可以简单的理解为缓存，它可以<strong>批量</strong>或者<strong>按周期性</strong>从Observable收集数据到一个集合，然后把这些数据集合打包发射，而不是一次发射一个数据~</p>
<p>代码示例1：批量收集</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//一次订阅2个</span></div><div class="line">Observable.range(<span class="number">1</span>, <span class="number">5</span>).buffer(<span class="number">2</span>).subscribe(<span class="keyword">new</span> Subscriber&lt;List&lt;Integer&gt;&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"onCompleted"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"onError"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onNext</span><span class="params">(List&lt;Integer&gt; integers)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"onNext"</span> + integers.toString());</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2843033-6d95ec3f39182001?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="批量收集"></p>
<p>代码示例：周期收集</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber)</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            subscriber.onNext(<span class="string">"消息"</span> + System.currentTimeMillis());</div><div class="line">            SystemClock.sleep(<span class="number">2000</span>);<span class="comment">//每隔2s发送消息</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;).subscribeOn(Schedulers.io()).buffer(<span class="number">3</span>, TimeUnit.SECONDS).subscribe(<span class="keyword">new</span> Observer&lt;List&lt;String&gt;&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"onCompleted"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"onError"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onNext</span><span class="params">(List&lt;String&gt; integers)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"onNext"</span> + integers.toString());</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="FlatMap"><a href="#FlatMap" class="headerlink" title="FlatMap"></a>FlatMap</h2><p>扁平映射，作用是将一个原始Observable发射的数据进行变化，输出一个或多个Observable，然后将这些Observable发射的数据平坦化的放进一个单独的Observable（参数一般是Func1）~</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; stringList = <span class="literal">new</span> ArrayList&lt;&gt;();</div><div class="line">stringList.add(<span class="string">"one"</span>);</div><div class="line">stringList.add(<span class="string">"two"</span>);</div><div class="line">stringList.add(<span class="string">"three"</span>);</div><div class="line">Observable.just(stringList).flatMap(<span class="literal">new</span> Func1&lt;<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt;, Observable&lt;<span class="built_in">String</span>&gt;&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> Observable&lt;<span class="built_in">String</span>&gt; call(<span class="built_in">List</span>&lt;<span class="built_in">String</span>&gt; <span class="built_in">list</span>) &#123;</div><div class="line">        <span class="keyword">return</span> Observable.from(<span class="built_in">list</span>);</div><div class="line">    &#125;</div><div class="line">&#125;).subscribe(<span class="literal">new</span> Action1&lt;<span class="built_in">String</span>&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="literal">void</span> call(<span class="built_in">String</span> next) &#123;</div><div class="line">        System.out.println(<span class="string">"onNext --&gt;"</span> + next);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2843033-ccf59e1495cad161?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="flatMap"></p>
<h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>映射，一般用于对原始的数据进行加工处理，返回一个加工过后的数据~</p>
<p>代码示例：</p>
<figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">List&lt;<span class="keyword">String</span>&gt; stringList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">stringList.<span class="built_in">add</span>(<span class="string">"one"</span>);</div><div class="line">stringList.<span class="built_in">add</span>(<span class="string">"two"</span>);</div><div class="line">stringList.<span class="built_in">add</span>(<span class="string">"three"</span>);</div><div class="line">Observable.just(stringList).<span class="built_in">map</span>(<span class="keyword">new</span> Func1&lt;List&lt;<span class="keyword">String</span>&gt;, <span class="keyword">String</span>&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="keyword">String</span> call(List&lt;<span class="keyword">String</span>&gt; strings) &#123;</div><div class="line">        <span class="keyword">return</span> strings.toString();</div><div class="line">    &#125;</div><div class="line">&#125;).subscribe(<span class="keyword">new</span> Action1&lt;<span class="keyword">String</span>&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> call(<span class="keyword">String</span> next) &#123;</div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"onNext --&gt;"</span> + next);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2843033-7f11a5b6a7118b60?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="map"></p>
<h2 id="GroupBy"><a href="#GroupBy" class="headerlink" title="GroupBy"></a>GroupBy</h2><p>代码示例：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Observable.range(<span class="number">0</span>, <span class="number">4</span>).groupBy(<span class="literal">new</span> Func1&lt;<span class="built_in">Integer</span>, <span class="built_in">Integer</span>&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="built_in">Integer</span> call(<span class="built_in">Integer</span> <span class="built_in">integer</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">integer</span> % <span class="number">2</span>;<span class="comment">//分成基数偶数两组</span></div><div class="line">    &#125;</div><div class="line">&#125;).subscribe(<span class="literal">new</span> Action1&lt;GroupedObservable&lt;<span class="built_in">Integer</span>, <span class="built_in">Integer</span>&gt;&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="literal">void</span> call(GroupedObservable&lt;<span class="built_in">Integer</span>, <span class="built_in">Integer</span>&gt; integerIntegerGroupedObservable) &#123;</div><div class="line">        integerIntegerGroupedObservable.subscribe(<span class="literal">new</span> Action1&lt;<span class="built_in">Integer</span>&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            <span class="keyword">public</span> <span class="literal">void</span> call(<span class="built_in">Integer</span> <span class="built_in">integer</span>) &#123;</div><div class="line">                System.out.println(<span class="string">"Group --&gt;"</span> + integerIntegerGroupedObservable.getKey() + <span class="string">"  &amp;&amp;  OnNext --&gt;"</span> + <span class="built_in">integer</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2843033-aa3b0c0346b4f7c9?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="GroupBy"></p>
<h2 id="Sacn"><a href="#Sacn" class="headerlink" title="Sacn"></a>Sacn</h2><p>sacn操作符是遍历源Observable产生的结果，通过自定义转换规则，依次输出结果给订阅者，</p>
<p>示例代码：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Observable.range(<span class="number">0</span>, <span class="number">4</span>).scan(<span class="literal">new</span> Func2&lt;<span class="built_in">Integer</span>, <span class="built_in">Integer</span>, <span class="built_in">Integer</span>&gt;() &#123;</div><div class="line">    <span class="comment">// 第一个参数是上次的结算结果，</span></div><div class="line">    <span class="comment">// 第二个参数是当此的源observable的输入值</span></div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="built_in">Integer</span> call(<span class="built_in">Integer</span> lastResult, <span class="built_in">Integer</span> currentInput) &#123;</div><div class="line">        <span class="keyword">return</span> lastResult + currentInput;</div><div class="line">    &#125;</div><div class="line">&#125;).subscribe(<span class="literal">new</span> Action1&lt;<span class="built_in">Integer</span>&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="literal">void</span> call(<span class="built_in">Integer</span> result) &#123;</div><div class="line">        System.out.println(<span class="string">"onNext --&gt;"</span> + result);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2843033-bb1fa3adb522f7b5?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="sacn"></p>
<h2 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h2><p>窗口，它可以<strong>批量</strong>或者<strong>按周期性</strong>从Observable收集数据到一个集合，然后把这些数据集合打包发射，而不是一次发射一个数据,类似于Buffer，但Buffer发射的是数据，Window发射的是Observable~</p>
<p>示例代码：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Observable.range(<span class="number">1</span>, <span class="number">5</span>).window(<span class="number">2</span>).subscribe(<span class="literal">new</span> Action1&lt;Observable&lt;<span class="built_in">Integer</span>&gt;&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="literal">void</span> call(Observable&lt;<span class="built_in">Integer</span>&gt; integerObservable) &#123;</div><div class="line">        System.out.println(<span class="string">"onOutsideNext --&gt;"</span> + integerObservable);</div><div class="line">        integerObservable.subscribe(<span class="literal">new</span> Action1&lt;<span class="built_in">Integer</span>&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            <span class="keyword">public</span> <span class="literal">void</span> call(<span class="built_in">Integer</span> <span class="built_in">integer</span>) &#123;</div><div class="line">                System.out.println(<span class="string">"onInsideNext --&gt;"</span> + <span class="built_in">integer</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/2843033-82b5bbd29f581f1d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="window"></p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>转换类操作符，就简单介绍到这里，希望能够对同学有所帮助，谢谢~</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> RxJava </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RxJava进阶一（创建类操作符）]]></title>
      <url>https://walid1992.github.io/2016/09/10/RxJava%E8%BF%9B%E9%98%B6%E4%B8%80%EF%BC%88%E5%88%9B%E5%BB%BA%E7%B1%BB%E6%93%8D%E4%BD%9C%E7%AC%A6%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>RxJava进阶一（创建类操作符）<br><a href="http://www.jianshu.com/p/fafc82b579cd" target="_blank" rel="external">RxJava进阶二（转换类操作符）</a><br>RxJava进阶三（过滤类操作符）<br>RxJava进阶四（组合类操作符）</p>
<hr>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前面已经对RxJava原理进行介绍，相信大家对于RXJava已经有了初步的认识，但是在具体使用方面还有些懵懂，从这篇开始详细介绍下RxJava的具体使用，首先介绍下RXJava的创建操作符~</p>
<h1 id="操作符总览"><a href="#操作符总览" class="headerlink" title="操作符总览"></a>操作符总览</h1><p>create、just、from、defer、range、interval、timer、empty、never 、error、repeat、delay…</p>
<h1 id="具体使用介绍"><a href="#具体使用介绍" class="headerlink" title="具体使用介绍"></a>具体使用介绍</h1><h2 id="create"><a href="#create" class="headerlink" title="create"></a>create</h2><p>create是RxJava最基本的创建操作符了，使用也是最简单的~</p>
<p><strong>代码调用</strong></p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Integer&gt; subscriber)</span> </span>&#123;</div><div class="line">        subscriber.onNext(<span class="number">1</span>);</div><div class="line">        subscriber.onNext(<span class="number">2</span>);</div><div class="line">        subscriber.onNext(<span class="number">3</span>);</div><div class="line">        subscriber.onNext(<span class="number">4</span>);</div><div class="line">        subscriber.onCompleted();</div><div class="line">    &#125;</div><div class="line">&#125;).subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"onCompleted"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Error = "</span> + e.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"integer = "</span> + integer);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>运行结果如下</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2843033-005b3f0c41665506?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="create操作符运行结果"></p>
<h2 id="just"><a href="#just" class="headerlink" title="just"></a>just</h2><p>just操作符将某个对象转化为Observable对象，并且将其发射出去，可以使一个数字、一个字符串、数组、Iterate对象等，是一种非常快捷的创建Observable对象的方法~</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; stringList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">stringList.add(<span class="string">"one"</span>);</div><div class="line">stringList.add(<span class="string">"two"</span>);</div><div class="line">stringList.add(<span class="string">"three"</span>);</div><div class="line">Observable.just(stringList).subscribe(<span class="keyword">new</span> Subscriber&lt;List&lt;String&gt;&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onNext</span><span class="params">(List&lt;String&gt; strings)</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>从代码很清楚的看到，在onNext方法中输出的是 **List</p>
<p><string><br></string>**</p>
<p> 对象。</p>
<h2 id="from"><a href="#from" class="headerlink" title="from"></a>from</h2><p>from操作符用来将某个对象转化为Observable对象，并且依次将其内容发射出去，from的接收值可以是集合或者数组，这个类似于just，但是just会将这个对象整个发射出去。比如说一个含有3个元素的集合，from会将集合分成3次发射，而使用just会发射一次来将整个的数组发射出去~</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">List&lt;String&gt; stringList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">stringList.<span class="keyword">add</span>(<span class="string">"one"</span>);</div><div class="line">stringList.<span class="keyword">add</span>(<span class="string">"two"</span>);</div><div class="line">stringList.<span class="keyword">add</span>(<span class="string">"three"</span>);</div><div class="line">Observable.<span class="keyword">from</span>(stringList).subscribe(<span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</div><div class="line">    @<span class="function">Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span>(<span class="params"></span>) &#123;</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"onCompleted"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @<span class="function">Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span>(<span class="params">Throwable e</span>) &#123;</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"Error = "</span> + e.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @<span class="function">Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span>(<span class="params">String s</span>) &#123;</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="string">"String = "</span> + s);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>很明显，from对集合或数组对象进行了遍历输出。</p>
<h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h2><p>Defer操作符只有当有Subscriber来订阅的时候才会创建一个新的Observable对象,也就是说每次订阅都会得到一个刚创建的最新的Observable对象，这可以确保Observable对象里的数据是最新的，而just则没有创建新的Observable对象，这样说可能并不利于大家消化，看下边与just对比示例~</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">Action1&lt;<span class="built_in">String</span>&gt; action1 = <span class="keyword">new</span> Action1&lt;<span class="built_in">String</span>&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">void</span> call(<span class="built_in">String</span> s) &#123;</div><div class="line">        System.out.println(s);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="comment">// defer</span></div><div class="line">Observable&lt;<span class="built_in">String</span>&gt; defer = Observable.defer(<span class="keyword">new</span> Func0&lt;Observable&lt;<span class="built_in">String</span>&gt;&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Observable&lt;<span class="built_in">String</span>&gt; call() &#123;</div><div class="line">        <span class="built_in">Object</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">        <span class="keyword">return</span> Observable.just(<span class="string">"defer : hashCode  = "</span> + o.hashCode());</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">defer.subscribe(action1);</div><div class="line">defer.subscribe(action1);</div><div class="line">defer.subscribe(action1);</div><div class="line"></div><div class="line"><span class="comment">// just</span></div><div class="line">Observable&lt;<span class="built_in">String</span>&gt; just = Observable.just(<span class="string">"just : hashCode  = "</span> + <span class="keyword">new</span> <span class="built_in">Object</span>().hashCode());</div><div class="line">just.subscribe(action1);</div><div class="line">just.subscribe(action1);</div><div class="line">just.subscribe(action1);</div></pre></td></tr></table></figure>
<p><strong>输出结果</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2843033-3f388973b5654ccd?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="defer操作符运行结果"></p>
<p>从输出结果可以看出来，defer订阅了三次，但是每次的地址值都发生了变化，而just则三次的地址值是同样的，从而验证了上面的结论。</p>
<h2 id="range"><a href="#range" class="headerlink" title="range"></a>range</h2><p>Range操作符根据输入的初始值【initial】和数量【number】发射number次、大于等于initial的值~</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Observable.<span class="built_in">range</span>(<span class="number">100</span>, <span class="number">5</span>).subscribe(new Action1&lt;<span class="keyword">Integer</span>&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> void <span class="keyword">call</span>(<span class="keyword">Integer</span> <span class="keyword">integer</span>) &#123;</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="keyword">integer</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/2843033-45e1512ee460a0fd?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="range操作符运行结果"></p>
<h2 id="interval"><a href="#interval" class="headerlink" title="interval"></a>interval</h2><p>Interval所创建的Observable对象会从0开始，每隔固定的时间发射一个数字，需要注意的是这个对象是运行在computation Scheduler,所以要更新UI需要在主线程中进行订阅~</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Observable</div><div class="line">        .interval(<span class="number">1</span>, TimeUnit.SECONDS)</div><div class="line">        .observeOn(AndroidSchedulers.mainThread())</div><div class="line">        .subscribe(<span class="keyword">new</span> Action1&lt;<span class="keyword">Long</span>&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">call</span>(<span class="keyword">Long</span> aLong) &#123;</div><div class="line">                System.out.<span class="keyword">println</span>(aLong);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p><strong>输出结果</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2843033-4f407cae4f9ae45b?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="interval操作符运行结果"></p>
<h2 id="timer"><a href="#timer" class="headerlink" title="timer"></a>timer</h2><p>Timer会在指定时间后发射一个数字0，注意其也是运行在computation Scheduler~</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Observable</span></div><div class="line">        <span class="selector-class">.timer</span>(<span class="number">2</span>, TimeUnit.SECONDS)</div><div class="line">        <span class="selector-class">.observeOn</span>(AndroidSchedulers.mainThread())</div><div class="line">        <span class="selector-class">.subscribe</span>(aLong -&gt; &#123;</div><div class="line">            <span class="comment">// 替代timertask与handler延迟，可以在这跳转主界面</span></div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>下面有几个不常用的创建操作符，还是简单介绍下吧~</p>
<h2 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h2><p>创建一个Observable不发射任何数据、而是立即调用<em>onCompleted</em>方法终止~</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Observable&lt;String&gt; empty = Observable.empty();</div><div class="line">empty.subscribe(<span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"onCompleted"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"onNext"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>输出结果</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2843033-100862b304857a29?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="empty操作符运行结果"></p>
<h2 id="never"><a href="#never" class="headerlink" title="never"></a>never</h2><p>创建一个Observable不发射任何数据、也不给订阅ta的Observer发出任何通知~</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Observable&lt;<span class="keyword">String</span>&gt; never = Observable.never();</div><div class="line">never.subscribe(<span class="keyword">new</span> Subscriber&lt;<span class="keyword">String</span>&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> onCompleted() &#123;</div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"onCompleted"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> onError(Throwable e) &#123;</div><div class="line">        System.out.<span class="built_in">println</span>(e.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> onNext(<span class="keyword">String</span> s) &#123;</div><div class="line">        System.out.<span class="built_in">println</span>(<span class="string">"onNext"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>输出结果</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2843033-a849866ea816a68c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="never操作符运行结果"></p>
<h2 id="error"><a href="#error" class="headerlink" title="error"></a>error</h2><p>返回一个Observable，当有Observer订阅ta时直接调用Observer的onError方法终止</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Observable&lt;String&gt; <span class="keyword">error</span> = Observable.<span class="keyword">error</span>(<span class="keyword">new</span> Throwable(<span class="string">"Observable.error"</span>));</div><div class="line"><span class="keyword">error</span>.subscribe(<span class="keyword">new</span> Subscriber&lt;String&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"onCompleted"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        System.out.println(e.getMessage());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onNext</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"onNext"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>输出结果</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2843033-98ff28885e308915?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="error操作符运行结果"></p>
<hr>
<p>接下来有两个不是创建类操作符，但是行为能力与创建类操作符非常相似，故在此介绍下~</p>
<h2 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h2><p>Repeat会将一个Observable对象重复发射，接收值是发射的次数，依然订阅在 computation Scheduler~</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>).<span class="built_in">repeat</span>(<span class="number">10</span>).subscribe(new Action1&lt;<span class="keyword">Integer</span>&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> void <span class="keyword">call</span>(<span class="keyword">Integer</span> <span class="keyword">integer</span>) &#123;</div><div class="line">        System.<span class="keyword">out</span>.println(<span class="keyword">integer</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>输出结果</strong></p>
<p><img src="http://upload-images.jianshu.io/upload_images/2843033-48c0a31319cee234?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="repeat操作符运行结果"></p>
<h2 id="delay"><a href="#delay" class="headerlink" title="delay"></a>delay</h2><p>功能与timer操作符一样，但是delay用于在事件中，可以延迟发送事件中的某一次发送~</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>).delay(<span class="number">2</span>,TimeUnit.SECONDS).subscribe(new Action1&lt;<span class="keyword">Integer</span>&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            <span class="keyword">public</span> void <span class="keyword">call</span>(<span class="keyword">Integer</span> <span class="keyword">integer</span>) &#123;</div><div class="line">                System.<span class="keyword">out</span>.println(<span class="keyword">integer</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>创建类操作符，就简单介绍到这里，希望能够对同学有所帮助，谢谢~</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> RxJava </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[RxJava 基础]]></title>
      <url>https://walid1992.github.io/2016/09/05/RxJava%20%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>终究没有经受住RxJava的诱惑，只恨自己来的比较晚，走起~</p>
<h1 id="RxJava-是什么？"><a href="#RxJava-是什么？" class="headerlink" title="RxJava 是什么？"></a>RxJava 是什么？</h1><p>一个在 Java VM 上使用可观测的序列来组成异步的、基于事件的程序的库~</p>
<h1 id="Rx-Java-有什么优势？"><a href="#Rx-Java-有什么优势？" class="headerlink" title="Rx Java 有什么优势？"></a>Rx Java 有什么优势？</h1><ol>
<li>逻辑简洁</li>
<li>异步</li>
</ol>
<h1 id="RxJava-能做什么？"><a href="#RxJava-能做什么？" class="headerlink" title="RxJava 能做什么？"></a>RxJava 能做什么？</h1><ol>
<li>EventBus事件中心</li>
<li>与Retrofit结合进行网络处理</li>
<li>RxBinding ….</li>
</ol>
<a id="more"></a>
<h1 id="初始RxJava"><a href="#初始RxJava" class="headerlink" title="初始RxJava"></a>初始RxJava</h1><p>我们先来看一下这坨代码：</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Thread() &#123;</div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</div><div class="line">        <span class="keyword">super</span>.run();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">File</span> folder : folders) &#123;</div><div class="line">            <span class="keyword">File</span>[] files = folder.listFiles();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">File</span> <span class="keyword">file</span> : files) &#123;</div><div class="line">                <span class="keyword">if</span> (<span class="keyword">file</span>.getName().endsWith(<span class="string">".png"</span>)) &#123;</div><div class="line">                    <span class="keyword">final</span> Bitmap bitmap = getBitmapFromFile(<span class="keyword">file</span>);</div><div class="line">                    getActivity().runOnUiThread(<span class="keyword">new</span> Runnable() &#123;</div><div class="line">                        @Override</div><div class="line">                        <span class="keyword">public</span> <span class="keyword">void</span> run() &#123;</div><div class="line">                            imageCollectorView.addImage(bitmap);</div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;&#125;.start();</div></pre></td></tr></table></figure>
<p>上面就是一个图片的遍历、过滤、加载过程，可是有强迫症的程序员都会很难过，因为又看到了影响心情的代码。</p>
<p>用RxJava如何实现呢？</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">Observable.<span class="keyword">from</span>(folders)</div><div class="line">    .flatMap(<span class="keyword">new</span> Func1&lt;<span class="keyword">File</span>, Observable&lt;<span class="keyword">File</span>&gt;&gt;() &#123;</div><div class="line">        @Override</div><div class="line">        <span class="keyword">public</span> Observable&lt;<span class="keyword">File</span>&gt; <span class="keyword">call</span>(<span class="keyword">File</span> <span class="keyword">file</span>) &#123;</div><div class="line">            <span class="keyword">return</span> Observable.<span class="keyword">from</span>(<span class="keyword">file</span>.listFiles());</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    .filter(<span class="keyword">new</span> Func1&lt;<span class="keyword">File</span>, <span class="keyword">Boolean</span>&gt;() &#123;</div><div class="line">        @Override</div><div class="line">        <span class="keyword">public</span> <span class="keyword">Boolean</span> <span class="keyword">call</span>(<span class="keyword">File</span> <span class="keyword">file</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">file</span>.getName().endsWith(<span class="string">".png"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    .map(<span class="keyword">new</span> Func1&lt;<span class="keyword">File</span>, Bitmap&gt;() &#123;</div><div class="line">        @Override</div><div class="line">        <span class="keyword">public</span> Bitmap <span class="keyword">call</span>(<span class="keyword">File</span> <span class="keyword">file</span>) &#123;</div><div class="line">            <span class="keyword">return</span> getBitmapFromFile(<span class="keyword">file</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    .subscribeOn(Schedulers.io())</div><div class="line">    .observeOn(AndroidSchedulers.mainThread())</div><div class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;Bitmap&gt;() &#123;</div><div class="line">        @Override</div><div class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="keyword">call</span>(Bitmap bitmap) &#123;</div><div class="line">            imageCollectorView.addImage(bitmap);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>吾皇勿怒，臣妾知道代码并没有减少，可是臣妾说的是逻辑简单，链式结构非常清晰不是吗？</p>
<p>相信您在顿悟了5s中之后也看到了其好处~</p>
<h1 id="使用介绍与原理分析"><a href="#使用介绍与原理分析" class="headerlink" title="使用介绍与原理分析"></a>使用介绍与原理分析</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>1、扩展的观察者模式 RxJava 的异步实现，是通过一种扩展的观察者模式来实现的，A 对象（观察者）对 B 对象（被观察者）的某种变化高度敏感，需要在 B 变化的一瞬间做出反应。</p>
<p>2、RxJava的四个基本概念：</p>
<ol>
<li>Observable (可观察者，即被观察者)</li>
<li>Observer (观察者)</li>
<li>subscribe (订阅)</li>
<li>事件 ： onNext()、onCompleted() 和 onError()</li>
</ol>
<p><strong>事件</strong></p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">onNext</span><span class="params">()</span></span>: 普通事件，每个事件执行之后的event。</div><div class="line"></div><div class="line"><span class="function"><span class="title">onCompleted</span><span class="params">()</span></span>: 事件队列完结。RxJava 不仅把每个事件单独处理，还会把它们看做一个队列。RxJava 规定，当不会再有新的onNext() 发出时，需要触发 onCompleted() 方法作为标志。</div><div class="line"></div><div class="line"><span class="function"><span class="title">onError</span><span class="params">()</span></span>: 事件队列异常。在事件处理过程中出异常时，onError() 会被触发，同时队列自动终止，不允许再有事件发出。</div></pre></td></tr></table></figure>
<p><strong>注意 ：</strong></p>
<p>在一个正确运行的事件序列中, onCompleted() 和 onError() 有且只有一个，并且是事件序列中的最后一个。需要注意的是，onCompleted() 和 onError() 二者也是互斥的，即在队列中调用了其中一个，就不应该再调用另一个。</p>
<p><img src="http://www.jcodecraeer.com/uploads/20151012/1444623685738597.png" alt="RxJava观察者模式"></p>
<h2 id="基本实现"><a href="#基本实现" class="headerlink" title="基本实现"></a>基本实现</h2><p>基于以上的概念， RxJava 的基本实现主要有三点：</p>
<p>1) 创建 Observer</p>
<p>Observer 即观察者，它决定事件触发的时候将有怎样的行为。 RxJava 中的 Observer 接口的实现方式：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Observer&lt;<span class="built_in">String</span>&gt; observer = <span class="literal">new</span> Observer&lt;<span class="built_in">String</span>&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="literal">void</span> onNext(<span class="built_in">String</span> s) &#123;</div><div class="line">        <span class="keyword">Log</span>.d(<span class="built_in">tag</span>, <span class="string">"Item: "</span> + s);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="literal">void</span> onCompleted() &#123;</div><div class="line">        <span class="keyword">Log</span>.d(<span class="built_in">tag</span>, <span class="string">"Completed!"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="literal">void</span> onError(Throwable e) &#123;</div><div class="line">        <span class="keyword">Log</span>.d(<span class="built_in">tag</span>, <span class="string">"Error!"</span>);</div><div class="line">    &#125;&#125;;</div></pre></td></tr></table></figure>
<p>除了 Observer 接口之外，RxJava 还内置了一个实现了 Observer 的抽象类：Subscriber。 Subscriber 对 Observer 接口进行了一些扩展，但他们的基本使用方式是完全一样的：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Subscriber&lt;<span class="built_in">String</span>&gt; subscriber = <span class="literal">new</span> Subscriber&lt;<span class="built_in">String</span>&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="literal">void</span> onNext(<span class="built_in">String</span> s) &#123;</div><div class="line">        <span class="keyword">Log</span>.d(<span class="built_in">tag</span>, <span class="string">"Item: "</span> + s);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="literal">void</span> onCompleted() &#123;</div><div class="line">        <span class="keyword">Log</span>.d(<span class="built_in">tag</span>, <span class="string">"Completed!"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="literal">void</span> onError(Throwable e) &#123;</div><div class="line">        <span class="keyword">Log</span>.d(<span class="built_in">tag</span>, <span class="string">"Error!"</span>);</div><div class="line">    &#125;&#125;;</div></pre></td></tr></table></figure>
<p>不仅基本使用方式一样，实质上，在 RxJava 的 subscribe 过程中，Observer 也总是会先被转换成一个 Subscriber 再使用。所以如果你只想使用基本功能，选择 Observer 和 Subscriber 是完全一样的。它们的区别对于使用者来说主要有两点：</p>
<p>onStart(): 这是 Subscriber 增加的方法。它会在 subscribe 刚开始，而事件还未发送之前被调用，可以用于做一些准备工作，例如数据的清零或重置。这是一个可选方法，默认情况下它的实现为空。需要注意的是，如果对准备工作的线程有要求（例如弹出一个显示进度的对话框，这必须在主线程执行）， onStart() 就不适用了，因为它总是在 subscribe 所发生的线程被调用，而不能指定线程。要在指定的线程来做准备工作，可以使用 doOnSubscribe() 方法，具体可以在后面的文中看到。</p>
<p>unsubscribe(): 这是 Subscriber 所实现的另一个接口 Subscription 的方法，用于取消订阅。在这个方法被调用后，Subscriber 将不再接收事件。一般在这个方法调用前，可以使用 isUnsubscribed() 先判断一下状态。 unsubscribe() 这个方法很重要，因为在 subscribe() 之后， Observable 会持有 Subscriber 的引用，这个引用如果不能及时被释放，将有内存泄露的风险。所以最好保持一个原则：要在不再使用的时候尽快在合适的地方（例如 onPause() onStop() 等方法中）调用unsubscribe() 来解除引用关系，以避免内存泄露的发生。</p>
<p>2) 创建 Observable</p>
<p>Observable 即被观察者，它决定什么时候触发事件以及触发怎样的事件。 RxJava 使用 create() 方法来创建一个 Observable ，并为它定义事件触发规则：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Observable observable = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;<span class="built_in">String</span>&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="built_in">void</span> call(Subscriber&lt;? <span class="keyword">super</span> <span class="built_in">String</span>&gt; subscriber) &#123;</div><div class="line">        subscriber.onNext(<span class="string">"Hello"</span>);</div><div class="line">        subscriber.onNext(<span class="string">"Hi"</span>);</div><div class="line">        subscriber.onNext(<span class="string">"Aloha"</span>);</div><div class="line">        subscriber.onCompleted();</div><div class="line">    &#125;&#125;);</div></pre></td></tr></table></figure>
<p>可以看到，这里传入了一个 OnSubscribe 对象作为参数。OnSubscribe 会被存储在返回的 Observable 对象中，它的作用相当于一个计划表，当 Observable 被订阅的时候，OnSubscribe 的 call() 方法会自动被调用，事件序列就会依照设定依次触发（对于上面的代码，就是观察者Subscriber 将会被调用三次 onNext() 和一次 onCompleted()）。这样，由被观察者调用了观察者的回调方法，就实现了由被观察者向观察者的事件传递，即观察者模式。 这个例子很简单：事件的内容是字符串，而不是一些复杂的对象；事件的内容是已经定好了的，而不像有的观察者模式一样是待确定的（例如网络请求的结果在请求返回之前是未知的）；所有事件在一瞬间被全部发送出去，而不是夹杂一些确定或不确定的时间间隔或者经过某种触发器来触发的。总之，这个例子看起来毫无实用价值。但这是为了便于说明，实质上只要你想，各种各样的事件发送规则你都可以自己来写。至于具体怎么做，后面都会讲到，但现在不行。只有把基础原理先说明白了，上层的运用才能更容易说清楚。</p>
<p>create() 方法是 RxJava 最基本的创造事件序列的方法。基于这个方法， RxJava 还提供了一些方法用来快捷创建事件队列，例如： just(T…): 将传入的参数依次发送出来。</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Observable observable = Observable.just(<span class="string">"Hello"</span>, <span class="string">"Hi"</span>, <span class="string">"Aloha"</span>);</div><div class="line"><span class="regexp">//</span> 将会依次调用：</div><div class="line"><span class="regexp">//</span> onNext(<span class="string">"Hello"</span>);</div><div class="line"><span class="regexp">//</span> onNext(<span class="string">"Hi"</span>);</div><div class="line"><span class="regexp">//</span> onNext(<span class="string">"Aloha"</span>);</div><div class="line"><span class="regexp">//</span> onCompleted();</div></pre></td></tr></table></figure>
<p>from(T[]) / from(Iterable&lt;? extends T&gt;) : 将传入的数组或 Iterable 拆分成具体对象后，依次发送出来。</p>
<figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">String[] words = &#123;<span class="string">"Hello"</span>, <span class="string">"Hi"</span>, <span class="string">"Aloha"</span>&#125;;</div><div class="line">Observable observable = Observable.from(words);</div><div class="line"><span class="regexp">//</span> 将会依次调用：</div><div class="line"><span class="regexp">//</span> onNext(<span class="string">"Hello"</span>);</div><div class="line"><span class="regexp">//</span> onNext(<span class="string">"Hi"</span>);</div><div class="line"><span class="regexp">//</span> onNext(<span class="string">"Aloha"</span>);</div><div class="line"><span class="regexp">//</span> onCompleted();</div></pre></td></tr></table></figure>
<p>上面 just(T…) 的例子和 from(T[]) 的例子，都和之前的 create(OnSubscribe) 的例子是等价的。</p>
<p>3) Subscribe (订阅)</p>
<p>创建了 Observable 和 Observer 之后，再用 subscribe() 方法将它们联结起来，整条链子就可以工作了。代码形式很简单：</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">observable.subscribe<span class="comment">(observer)</span>;</div><div class="line"><span class="comment">// 或者：</span></div><div class="line">observable.subscribe<span class="comment">(subscriber)</span>;</div></pre></td></tr></table></figure>
<p>有人可能会注意到， subscribe() 这个方法有点怪：它看起来是『observalbe 订阅了 observer / subscriber』而不是『observer / subscriber 订阅了 observalbe』，这看起来就像『杂志订阅了读者』一样颠倒了对象关系。这让人读起来有点别扭，不过如果把 API 设计成 observer.subscribe(observable) / subscriber.subscribe(observable) ，虽然更加符合思维逻辑，但对流式 API 的设计就造成影响了，比较起来明显是得不偿失的。</p>
<p>Observable.subscribe(Subscriber) 的内部实现是这样的（仅核心代码）： // 注意：这不是 subscribe() 的源码，而是将源码中与性能、兼容性、扩展性有关的代码剔除后的核心代码。 // 如果需要看源码，可以去 RxJava 的 GitHub 仓库下载。</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">public</span> <span class="keyword">Subscription </span><span class="keyword">subscribe(Subscriber </span><span class="keyword">subscriber) </span>&#123;</div><div class="line">    <span class="keyword">subscriber.onStart();</span></div><div class="line">    onSubscribe.call(<span class="keyword">subscriber);</span></div><div class="line">    return <span class="keyword">subscriber;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从代码可以看出，订阅事件主要做如下几件事：</p>
<ol>
<li>onstart 准备操作</li>
<li>call 业务逻辑处理，而且业务逻辑处理并不是Observable创建时运行的，call()方法执行的时候开始运行的~</li>
<li>将传入的 Subscriber 作为 Subscription 返回。这是为了方便 unsubscribe().</li>
</ol>
<p>整个过程中对象间的关系如下图： <img src="http://www.jcodecraeer.com/uploads/20151012/1444623686863819.png" alt="订阅过程"></p>
<p>除了 subscribe(Observer) 和 subscribe(Subscriber) ，subscribe() 还支持不完整定义的回调，RxJava 会自动根据定义创建出Subscriber 。形式如下：</p>
<figure class="highlight pf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">Action1<span class="variable">&lt;String&gt;</span> <span class="keyword">on</span>NextAction = new Action1<span class="variable">&lt;String&gt;</span>() &#123;</div><div class="line">    // <span class="keyword">on</span>Next()</div><div class="line">    @Override</div><div class="line">    public void call(String s) &#123;</div><div class="line">        Log.d(<span class="keyword">tag</span>, s);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">Action1<span class="variable">&lt;Throwable&gt;</span> <span class="keyword">on</span>ErrorAction = new Action1<span class="variable">&lt;Throwable&gt;</span>() &#123;</div><div class="line">    // <span class="keyword">on</span>Error()</div><div class="line">    @Override</div><div class="line">    public void call(Throwable throwable) &#123;</div><div class="line">        // Error handling</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">Action0 <span class="keyword">on</span>CompletedAction = new Action0() &#123;</div><div class="line">    // <span class="keyword">on</span>Completed()</div><div class="line">    @Override</div><div class="line">    public void call() &#123;</div><div class="line">        Log.d(<span class="keyword">tag</span>, <span class="string">"completed"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// 自动创建 Subscriber ，并使用 <span class="keyword">on</span>NextAction 来定义 <span class="keyword">on</span>Next()</div><div class="line">observable.subscribe(<span class="keyword">on</span>NextAction);</div><div class="line">// 自动创建 Subscriber ，并使用 <span class="keyword">on</span>NextAction 和 <span class="keyword">on</span>ErrorAction 来定义 <span class="keyword">on</span>Next() 和 <span class="keyword">on</span>Error()</div><div class="line">observable.subscribe(<span class="keyword">on</span>NextAction, <span class="keyword">on</span>ErrorAction);</div><div class="line">// 自动创建 Subscriber ，并使用 <span class="keyword">on</span>NextAction、 <span class="keyword">on</span>ErrorAction 和 <span class="keyword">on</span>CompletedAction 来定义 <span class="keyword">on</span>Next()、 <span class="keyword">on</span>Error() 和 <span class="keyword">on</span>Completed()</div><div class="line">observable.subscribe(<span class="keyword">on</span>NextAction, <span class="keyword">on</span>ErrorAction, <span class="keyword">on</span>CompletedAction);</div></pre></td></tr></table></figure>
<p>简单解释一下这段代码中出现的 Action1 和 Action0。 Action0 是 RxJava 的一个接口，它只有一个方法 call()，这个方法是无参无返回值的；由于 onCompleted() 方法也是无参无返回值的，因此 Action0 可以被当成一个包装对象，将 onCompleted() 的内容打包起来将自己作为一个参数传入 subscribe() 以实现不完整定义的回调。这样其实也可以看做将 onCompleted() 方法作为参数传进了subscribe()，相当于其他某些语言中的『闭包』。 Action1 也是一个接口，它同样只有一个方法 call(T param)，这个方法也无返回值，但有一个参数；与 Action0 同理，由于 onNext(T obj) 和 onError(Throwable error) 也是单参数无返回值的，因此 Action1可以将 onNext(obj) 和 onError(error) 打包起来传入 subscribe() 以实现不完整定义的回调。事实上，虽然 Action0 和 Action1在 API 中使用最广泛，但 RxJava 是提供了多个 ActionX 形式的接口 (例如 Action2, Action3) 的，它们可以被用以包装不同的无返回值的方法。 注：正如前面所提到的，Observer 和 Subscriber 具有相同的角色，而且 Observer 在 subscribe() 过程中最终会被转换成 Subscriber 对象，因此，从这里开始，后面的描述我将用 Subscriber 来代替 Observer ，这样更加严谨。</p>
<p>4) 场景示例</p>
<p>下面举两个例子： 为了把原理用更清晰的方式表述出来，本文中挑选的都是功能尽可能简单的例子，以至于有些示例代码看起来会有『画蛇添足』『明明不用 RxJava 可以更简便地解决问题』的感觉。当你看到这种情况，不要觉得是因为 RxJava 太啰嗦，而是因为在过早的时候举出真实场景的例子并不利于原理的解析，因此我刻意挑选了简单的情景。</p>
<p>a. 打印字符串数组 将字符串数组 names 中的所有字符串依次打印出来：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span>[] names = ...;</div><div class="line">Observable.from(names)</div><div class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;<span class="built_in">String</span>&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="built_in">void</span> call(<span class="built_in">String</span> name) &#123;</div><div class="line">            Log.d(tag, name);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>b. 由 id 取得图片并显示 由指定的一个 drawable 文件 id drawableRes 取得图片，并显示在 ImageView 中，并在出现异常的时候打印 Toast 报错：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> drawableRes = ...;</div><div class="line">ImageView imageView = ...;</div><div class="line">Observable.create(<span class="keyword">new</span> OnSubscribe&lt;Drawable&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Drawable&gt; subscriber)</span> </span>&#123;</div><div class="line">        Drawable drawable = getTheme().getDrawable(drawableRes));</div><div class="line">        subscriber.onNext(drawable);</div><div class="line">        subscriber.onCompleted();</div><div class="line">    &#125;</div><div class="line">&#125;).subscribe(<span class="keyword">new</span> Observer&lt;Drawable&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Drawable drawable)</span> </span>&#123;</div><div class="line">        imageView.setImageDrawable(drawable);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        Toast.makeText(activity, <span class="string">"Error!"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>正如上面两个例子这样，创建出 Observable 和 Subscriber ，再用 subscribe() 将它们串起来，一次 RxJava 的基本使用就完成了。非常简单。</p>
<p>RxJava 的默认规则中，事件的发出和消费都是在同一个线程的。也就是说，如果只用上面的方法，实现出来的只是一个同步的观察者模式。观察者模式本身的目的就是『后台处理，前台回调』的异步机制，因此异步对于 RxJava 是至关重要的。而要实现异步，则需要用到 RxJava 的另一个概念： Scheduler 。</p>
<h2 id="线程控制-—-Scheduler基础"><a href="#线程控制-—-Scheduler基础" class="headerlink" title="线程控制 —- Scheduler基础"></a>线程控制 —- Scheduler基础</h2><p>在不指定线程的情况下， RxJava 遵循的是线程不变的原则，即：在哪个线程调用 subscribe()，就在哪个线程生产事件；在哪个线程生产事件，就在哪个线程消费事件。如果需要切换线程，就需要用到 Scheduler （调度器）。</p>
<p>1) Scheduler 基础的 API</p>
<p>在RxJava 中，Scheduler —-调度器，相当于线程控制器，RxJava 通过它来指定每一段代码应该运行在什么样的线程。RxJava 已经内置了几个 Scheduler ，它们已经适合大多数的使用场景：</p>
<ol>
<li>Schedulers.immediate(): 直接在当前线程运行，相当于不指定线程。这是默认的 Scheduler。</li>
<li>Schedulers.newThread(): 总是启用新线程，并在新线程执行操作。</li>
<li>Schedulers.io(): I/O 操作（读写文件、读写数据库、网络信息交互等）所使用的 Scheduler。行为模式和 newThread() 差不多，区别在于 io() 的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下 io() 比 newThread() 更有效率。不要把计算工作放在 io() 中，可以避免创建不必要的线程。</li>
<li><p>Schedulers.computation(): 计算所使用的 Scheduler。这个计算指的是 CPU 密集型计算，即不会被 I/O 等操作限制性能的操作，例如图形的计算。这个 Scheduler 使用的固定的线程池，大小为 CPU 核数。不要把 I/O 操作放在 computation() 中，否则 I/O 操作的等待时间会浪费 CPU。</p>
<p>另外， Android 还有一个专用的 AndroidSchedulers.mainThread()，它指定的操作将在 Android 主线程运行。</p>
</li>
</ol>
<p>有了这几个 Scheduler ，就可以使用 subscribeOn() 和 observeOn() 两个方法来对线程进行控制了。</p>
<ol>
<li>subscribeOn(): 指定 subscribe() 所发生的线程，即 Observable.OnSubscribe 被激活时所处的线程。或者叫做事件产生的线程。</li>
<li>observeOn(): 指定 Subscriber 所运行在的线程。或者叫做事件消费的线程。</li>
</ol>
<p>文字叙述总归难理解，上代码：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</div><div class="line">    .subscribeOn(Schedulers.io()) <span class="comment">// 指定 subscribe() 发生在 IO 线程</span></div><div class="line">    .observeOn(AndroidSchedulers.mainThread()) <span class="comment">// 指定 Subscriber 的回调发生在主线程</span></div><div class="line">    .subscribe(<span class="literal">new</span> Action1&lt;<span class="built_in">Integer</span>&gt;() &#123;</div><div class="line">        @Override</div><div class="line">        <span class="keyword">public</span> <span class="literal">void</span> call(<span class="built_in">Integer</span> number) &#123;</div><div class="line">            <span class="keyword">Log</span>.d(<span class="built_in">tag</span>, <span class="string">"number:"</span> + number);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>上面这段代码中，由于 subscribeOn(Schedulers.io()) 的指定，被创建的事件的内容 1、2、3、4 将会在IO线程发出； 而由于observeOn(AndroidScheculers.mainThread()) 的指定，因此 subscriber 数字的打印将发生在主线程 。事实上，这种在subscribe() 之前写上两句 subscribeOn(Scheduler.io()) 和 observeOn(AndroidSchedulers.mainThread()) 的使用方式非常常见，它适用于多数的 『后台线程取数据，主线程显示』的程序策略。</p>
<p>而前面提到的由图片 id 取得图片并显示的例子，如果也加上这两句：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> drawableRes = ...;</div><div class="line">ImageView imageView = ...;</div><div class="line">Observable.create(<span class="keyword">new</span> OnSubscribe&lt;Drawable&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Drawable&gt; subscriber)</span> </span>&#123;</div><div class="line">        Drawable drawable = getTheme().getDrawable(drawableRes));</div><div class="line">        subscriber.onNext(drawable);</div><div class="line">        subscriber.onCompleted();</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line">.subscribeOn(Schedulers.io()) <span class="comment">// 指定 subscribe() 发生在 IO 线程</span></div><div class="line">.observeOn(AndroidSchedulers.mainThread()) <span class="comment">// 指定 Subscriber 的回调发生在主线程</span></div><div class="line">.subscribe(<span class="keyword">new</span> Observer&lt;Drawable&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Drawable drawable)</span> </span>&#123;</div><div class="line">        imageView.setImageDrawable(drawable);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        Toast.makeText(activity, <span class="string">"Error!"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>那么，加载图片将会发生在 IO 线程，而设置图片则被设定在了主线程。这就意味着，即使加载图片耗费了几十甚至几百毫秒的时间，也不会造成丝毫界面的卡顿。</p>
<p>2) Scheduler 的原理基础</p>
<p>RxJava 的 Scheduler API 很方便，也很神奇（加了一句话就把线程切换了，怎么做到的？而且 subscribe() 不是最外层直接调用的方法吗，它竟然也能被指定线程？）。然而 Scheduler 的原理需要放在后面讲，因为它的原理是以下一节《变换》的原理作为基础的。</p>
<p>好吧这一节其实我屁也没说，只是为了让你安心，让你知道我不是忘了讲原理，而是把它放在了更合适的地方。</p>
<h2 id="变换"><a href="#变换" class="headerlink" title="变换"></a>变换</h2><p>RxJava 提供了对事件序列进行变换的支持，这是它的核心功能之一，也是大多数人说『RxJava 真是太好用了』的最大原因。所谓变换，就是将事件序列中的对象或整个序列进行加工处理，转换成不同的事件或事件序列。概念说着总是模糊难懂的，来看 API。</p>
<p>1) API</p>
<p>首先看一个 map() 的例子：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="string">"images/logo.png"</span>) <span class="comment">// 输入类型 String</span></div><div class="line">    .map(<span class="keyword">new</span> Func1&lt;String, Bitmap&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function">Bitmap <span class="title">call</span><span class="params">(String filePath)</span> </span>&#123; <span class="comment">// 参数类型 String</span></div><div class="line">            <span class="function"><span class="keyword">return</span> <span class="title">getBitmapFromPath</span><span class="params">(filePath)</span></span>; <span class="comment">// 返回类型 Bitmap</span></div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;Bitmap&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">(Bitmap bitmap)</span> </span>&#123; <span class="comment">// 参数类型 Bitmap</span></div><div class="line">            showBitmap(bitmap);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>这里出现了一个叫做 Func1 的类。它和 Action1 非常相似，也是 RxJava 的一个接口，用于包装含有一个参数的方法。 Func1 和Action 的区别在于， Func1 包装的是有返回值的方法。另外，和 ActionX 一样， FuncX 也有多个，用于不同参数个数的方法。FuncX和 ActionX 的区别在 FuncX 包装的是有返回值的方法。</p>
<p>可以看到，map() 方法将参数中的 String 对象转换成一个 Bitmap 对象后返回，而在经过 map() 方法后，事件的参数类型也由 String转为了 Bitmap。这种直接变换对象并返回的，是最常见的也最容易理解的变换。不过 RxJava 的变换远不止这样，它不仅可以针对事件对象，还可以针对整个事件队列，这使得 RxJava 变得非常灵活。我列举几个常用的变换：</p>
<p>map(): 事件对象的直接变换，具体功能上面已经介绍过。它是 RxJava 最常用的变换。 map() 示意图： <img src="http://www.jcodecraeer.com/uploads/20151012/1444623688114171.png" alt="map 示意图"> flatMap(): 这是一个很有用但非常难理解的变换，因此我决定花多些篇幅来介绍它。 首先假设这么一种需求：假设有一个数据结构『学生』，现在需要打印出一组学生的名字。实现方式很简单：</p>
<figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Student[] students = ...;</div><div class="line">    Subscriber&lt;<span class="built_in">String</span>&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;<span class="built_in">String</span>&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="built_in">void</span> onNext(<span class="built_in">String</span> name) &#123;</div><div class="line">            Log.d(tag, name);</div><div class="line">        &#125;</div><div class="line">        ...</div><div class="line">    &#125;;</div><div class="line">    Observable.from(students)</div><div class="line">        .map(<span class="keyword">new</span> Func1&lt;Student, <span class="built_in">String</span>&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="built_in">String</span> call(Student student) &#123;</div><div class="line">                <span class="keyword">return</span> student.getName();</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .subscribe(subscriber);</div></pre></td></tr></table></figure>
<p>很简单。那么再假设：如果要打印出每个学生所需要修的所有课程的名称呢？（需求的区别在于，每个学生只有一个名字，但却有多个课程。）首先可以这样实现：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Student[] students = ...<span class="comment">;</span></div><div class="line"><span class="keyword">Subscriber&lt;Student&gt; </span><span class="keyword">subscriber </span>= new <span class="keyword">Subscriber&lt;Student&gt;() </span>&#123;</div><div class="line">    @Override</div><div class="line">    public void onNext(Student student) &#123;</div><div class="line">        List&lt;Course&gt; courses = student.getCourses()<span class="comment">;</span></div><div class="line">        for (int i = <span class="number">0</span><span class="comment">; i &lt; courses.size(); i++) &#123;</span></div><div class="line">            Course course = courses.get(i)<span class="comment">;</span></div><div class="line">            Log.d(tag, course.getName())<span class="comment">;</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;<span class="comment">;</span></div><div class="line">Observable.from(students)</div><div class="line">    .<span class="keyword">subscribe(subscriber);</span></div></pre></td></tr></table></figure>
<p>依然很简单。那么如果我不想在 Subscriber 中使用 for 循环，而是希望 Subscriber 中直接传入单个的 Course 对象呢（这对于代码复用很重要）？用 map() 显然是不行的，因为 map() 是一对一的转化，而我现在的要求是一对多的转化。那怎么才能把一个 Student 转化成多个 Course 呢？</p>
<p>这个时候，就需要用 flatMap() 了：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Student[] students = ...;</div><div class="line">Subscriber&lt;Course&gt; subscriber = <span class="keyword">new</span> Subscriber&lt;Course&gt;() &#123;</div><div class="line">    @<span class="function">Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span>(<span class="params">Course course</span>) &#123;</div><div class="line">        Log.d(tag, course.getName());</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;;</div><div class="line">Observable.<span class="keyword">from</span>(students)</div><div class="line">    .flatMap(<span class="keyword">new</span> Func1&lt;Student, Observable&lt;Course&gt;&gt;() &#123;</div><div class="line">        @<span class="function">Override</span></div><div class="line">        <span class="keyword">public</span> Observable&lt;Course&gt; <span class="title">call</span>(<span class="params">Student student</span>) &#123;</div><div class="line">            <span class="keyword">return</span> Observable.<span class="keyword">from</span>(student.getCourses());</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    .subscribe(subscriber);</div></pre></td></tr></table></figure>
<p>从上面的代码可以看出， flatMap() 和 map() 有一个相同点：它也是把传入的参数转化之后返回另一个对象。但需要注意，和 map()不同的是， flatMap() 中返回的是个 Observable 对象，并且这个 Observable 对象并不是被直接发送到了 Subscriber 的回调方法中。 flatMap() 的原理是这样的：</p>
<ol>
<li>使用传入的事件对象创建一个 Observable 对象；</li>
<li>并不发送这个 Observable, 而是将它激活，于是它开始发送事件；</li>
<li>每一个创建出来的 Observable 发送的事件，都被汇入同一个 Observable ，而这个 Observable 负责将这些事件统一交给 Subscriber 的回调方法。这三个步骤，把事件拆成了两级，通过一组新创建的 Observable 将初始的对象『铺平』之后通过统一路径分发了下去。而这个『铺平』就是 flatMap() 所谓的 flat。</li>
</ol>
<p>flatMap() 示意图：</p>
<p><img src="http://www.jcodecraeer.com/uploads/20151012/1444623688713380.png" alt="flatMap 示意图"></p>
<p>扩展：由于可以在嵌套的 Observable 中添加异步代码， flatMap() 也常用于嵌套的异步操作，例如嵌套的网络请求。示例代码（Retrofit + RxJava）：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">networkClient.token() <span class="comment">// 返回 Observable&lt;String&gt;，在订阅时请求 token，并在响应后发送 token</span></div><div class="line">    .flatMap(<span class="keyword">new</span> Func1&lt;String, Observable&lt;Messages&gt;&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> Observable&lt;Messages&gt; call(String token) &#123;</div><div class="line">            <span class="comment">// 返回 Observable&lt;Messages&gt;，在订阅时请求消息列表，并在响应后发送请求到的消息列表</span></div><div class="line">            <span class="function"><span class="keyword">return</span> networkClient.<span class="title">messages</span><span class="params">()</span></span>;</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    .subscribe(<span class="keyword">new</span> Action1&lt;Messages&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">(Messages messages)</span> </span>&#123;</div><div class="line">            <span class="comment">// 处理显示消息列表</span></div><div class="line">            showMessages(messages);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>传统的嵌套请求需要使用嵌套的 Callback 来实现。而通过 flatMap() ，可以把嵌套的请求写在一条链中，从而保持程序逻辑的清晰。</p>
<figure class="highlight http"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">throttleFirst()</span>: 在每次事件触发后的一定时间间隔内丢弃新的事件。常用作去抖动过滤，例如按钮的点击监听器：</div><div class="line"></div><div class="line"><span class="less"><span class="selector-tag">RxView</span><span class="selector-class">.clickEvents</span>(button) <span class="comment">// RxBinding 代码，后面的文章有解释</span></span></div><div class="line">    <span class="selector-class">.throttleFirst</span>(<span class="number">500</span>, TimeUnit.MILLISECONDS) <span class="comment">// 设置防抖间隔为 500ms</span></div><div class="line">    <span class="selector-class">.subscribe</span>(subscriber);</div><div class="line"></div><div class="line">妈妈再也不怕我的用户手抖点开两个重复的界面啦。</div></pre></td></tr></table></figure>
<p>此外， RxJava 还提供很多便捷的方法来实现事件序列的变换，这里就不一一举例了。</p>
<p>2) 变换的原理：lift()</p>
<p>这些变换虽然功能各有不同，但实质上都是针对事件序列的处理和再发送。而在 RxJava 的内部，它们是基于同一个基础的变换方法：lift(Operator)。首先看一下 lift() 的内部实现（仅核心代码）：</p>
<figure class="highlight haxe"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 注意：这不是 lift() 的源码，而是将源码中与性能、兼容性、扩展性有关的代码剔除后的核心代码。</span></div><div class="line"><span class="comment">// 如果需要看源码，可以去 RxJava 的 GitHub 仓库下载。</span></div><div class="line"><span class="keyword">public</span> &lt;R&gt; Observable&lt;R&gt; lift(Operator&lt;? extends R, ? <span class="keyword">super</span> T&gt; operator) &#123;</div><div class="line">    <span class="keyword">return</span> Observable.create(<span class="keyword">new</span> <span class="type">OnSubscribe</span>&lt;R&gt;() &#123;</div><div class="line">        @Override</div><div class="line">        <span class="keyword">public</span> void call(Subscriber subscriber) &#123;</div><div class="line">            Subscriber <span class="keyword">new</span><span class="type">Subscriber</span> = operator.call(subscriber);</div><div class="line">            <span class="keyword">new</span><span class="type">Subscriber</span>.onStart();</div><div class="line">            onSubscribe.call(<span class="keyword">new</span><span class="type">Subscriber</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这段代码很有意思：它生成了一个新的 Observable 并返回，而且创建新 Observable 所用的参数 OnSubscribe 的回调方法 call() 中的实现竟然看起来和前面讲过的 Observable.subscribe() 一样！然而它们并不一样哟~不一样的地方关键就在于第二行onSubscribe.call(subscriber) 中的 onSubscribe 所指代的对象不同（高能预警：接下来的几句话可能会导致身体的严重不适）—-</p>
<figure class="highlight erlang"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">subscribe</span><span class="params">()</span> 中这句话的 <span class="title">onSubscribe</span> 指的是 O<span class="title">bservable</span> 中的 <span class="title">onSubscribe</span> 对象，这个没有问题，但是 <span class="title">lift</span><span class="params">()</span> 之后的情况就复杂了点。</span></div><div class="line"></div><div class="line">当含有 <span class="title">lift</span><span class="params">()</span> 时：</div><div class="line">1.<span class="title">lift</span><span class="params">()</span> 创建了一个 O<span class="title">bservable</span> 后，加上之前的原始 O<span class="title">bservable</span>，已经有两个 O<span class="title">bservable</span> 了；</div><div class="line">2.而同样地，新 O<span class="title">bservable</span> 里的新 O<span class="title">nSubscribe</span> 加上之前的原始 O<span class="title">bservable</span> 中的原始 O<span class="title">nSubscribe</span>，也就有了两个O<span class="title">nSubscribe</span>；</div><div class="line">3.当用户调用经过 <span class="title">lift</span><span class="params">()</span> 后的 O<span class="title">bservable</span> 的 <span class="title">subscribe</span><span class="params">()</span> 的时候，使用的是 <span class="title">lift</span><span class="params">()</span> 所返回的新的 O<span class="title">bservable</span> ，于是它所触发的 <span class="title">onSubscribe</span>.<span class="title">call</span><span class="params">(subscriber)</span>，也是用的新 O<span class="title">bservable</span> 中的新 O<span class="title">nSubscribe</span>，即在 <span class="title">lift</span><span class="params">()</span> 中生成的那个 O<span class="title">nSubscribe</span>；</div><div class="line">4.而这个新 O<span class="title">nSubscribe</span> 的 <span class="title">call</span><span class="params">()</span> 方法中的 <span class="title">onSubscribe</span> ，就是指的原始 O<span class="title">bservable</span> 中的原始 O<span class="title">nSubscribe</span> ，在这个 <span class="title">call</span><span class="params">()</span>方法里，新 O<span class="title">nSubscribe</span> 利用 <span class="title">operator</span>.<span class="title">call</span><span class="params">(subscriber)</span> 生成了一个新的 S<span class="title">ubscriber</span>（O<span class="title">perator</span> 就是在这里，通过自己的<span class="title">call</span><span class="params">()</span> 方法将新 S<span class="title">ubscriber</span> 和原始 S<span class="title">ubscriber</span> 进行关联，并插入自己的『变换』代码以实现变换），然后利用这个新S<span class="title">ubscriber</span> 向原始 O<span class="title">bservable</span> 进行订阅。</div><div class="line">这样就实现了 <span class="title">lift</span><span class="params">()</span> 过程，有点像一种代理机制，通过事件拦截和处理实现事件序列的变换。</div></pre></td></tr></table></figure>
<p>精简掉细节的话，也可以这么说：在 Observable 执行了 lift(Operator) 方法之后，会返回一个新的 Observable，这个新的Observable 会像一个代理一样，负责接收原始的 Observable 发出的事件，并在处理后发送给 Subscriber。</p>
<p>如果你更喜欢具象思维，可以看图：</p>
<p>lift() 原理图</p>
<p><img src="http://www.jcodecraeer.com/uploads/20151012/1444623689992140.png" alt="lift 原理图"></p>
<p>两次和多次的 lift() 同理，如下图：</p>
<p><img src="http://www.jcodecraeer.com/uploads/20151012/1444623690796948.png" alt="两次和多次的 lift"></p>
<p>举一个具体的 Operator 的实现。下面这是一个将事件中的 Integer 对象转换成 String 的例子，仅供参考：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">observable.lift(<span class="keyword">new</span> Observable.Operator&lt;String, Integer&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> Subscriber&lt;? <span class="keyword">super</span> Integer&gt; call(<span class="keyword">final</span> Subscriber&lt;? <span class="keyword">super</span> String&gt; subscriber) &#123;</div><div class="line">        <span class="comment">// 将事件序列中的 Integer 对象转换为 String 对象</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">                subscriber.onNext(<span class="string">""</span> + integer);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">                subscriber.onCompleted();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">                subscriber.onError(e);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">讲述 lift() 的原理只是为了让你更好地了解 RxJava ，从而可以更好地使用它。然而不管你是否理解了 lift() 的原理，RxJava 都不建议开发者自定义 Operator 来直接使用 lift()，而是建议尽量使用已有的 lift() 包装方法（如map() flatMap() 等）进行组合来实现需求，因为直接使用 lift() 非常容易发生一些难以发现的错误。</div></pre></td></tr></table></figure>
<p>3) compose: 对 Observable 整体的变换</p>
<p>除了 lift() 之外， Observable 还有一个变换方法叫做 compose(Transformer)。它和 lift() 的区别在于， lift() 是针对事件项和事件序列的，而 compose() 是针对 Observable 自身进行变换。举个例子，假设在程序中有多个 Observable ，并且他们都需要应用一组相同的 lift() 变换。你可以这么写：</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">observable1</span></div><div class="line">    <span class="selector-class">.lift1</span>()</div><div class="line">    <span class="selector-class">.lift2</span>()</div><div class="line">    <span class="selector-class">.lift3</span>()</div><div class="line">    <span class="selector-class">.lift4</span>()</div><div class="line">    <span class="selector-class">.subscribe</span>(<span class="selector-tag">subscriber1</span>);</div><div class="line"><span class="selector-tag">observable2</span></div><div class="line">    <span class="selector-class">.lift1</span>()</div><div class="line">    <span class="selector-class">.lift2</span>()</div><div class="line">    <span class="selector-class">.lift3</span>()</div><div class="line">    <span class="selector-class">.lift4</span>()</div><div class="line">    <span class="selector-class">.subscribe</span>(<span class="selector-tag">subscriber2</span>);</div><div class="line"><span class="selector-tag">observable3</span></div><div class="line">    <span class="selector-class">.lift1</span>()</div><div class="line">    <span class="selector-class">.lift2</span>()</div><div class="line">    <span class="selector-class">.lift3</span>()</div><div class="line">    <span class="selector-class">.lift4</span>()</div><div class="line">    <span class="selector-class">.subscribe</span>(<span class="selector-tag">subscriber3</span>);</div><div class="line"><span class="selector-tag">observable4</span></div><div class="line">    <span class="selector-class">.lift1</span>()</div><div class="line">    <span class="selector-class">.lift2</span>()</div><div class="line">    <span class="selector-class">.lift3</span>()</div><div class="line">    <span class="selector-class">.lift4</span>()</div><div class="line">    <span class="selector-class">.subscribe</span>(<span class="selector-tag">subscriber1</span>);</div></pre></td></tr></table></figure>
<p>你觉得这样太不软件工程了，于是你改成了这样：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">private</span> <span class="selector-tag">Observable</span> <span class="selector-tag">liftAll</span>(Observable observable) &#123;</div><div class="line">    <span class="selector-tag">return</span> <span class="selector-tag">observable</span></div><div class="line">        <span class="selector-class">.lift1</span>()</div><div class="line">        <span class="selector-class">.lift2</span>()</div><div class="line">        <span class="selector-class">.lift3</span>()</div><div class="line">        <span class="selector-class">.lift4</span>();</div><div class="line">&#125;</div><div class="line">...</div><div class="line"><span class="selector-tag">liftAll</span>(observable1)<span class="selector-class">.subscribe</span>(subscriber1);</div><div class="line"><span class="selector-tag">liftAll</span>(observable2)<span class="selector-class">.subscribe</span>(subscriber2);</div><div class="line"><span class="selector-tag">liftAll</span>(observable3)<span class="selector-class">.subscribe</span>(subscriber3);</div><div class="line"><span class="selector-tag">liftAll</span>(observable4)<span class="selector-class">.subscribe</span>(subscriber4);</div></pre></td></tr></table></figure>
<p>可读性、可维护性都提高了。可是 Observable 被一个方法包起来，这种方式对于 Observale 的灵活性似乎还是增添了那么点限制。怎么办？这个时候，就应该用 compose() 来解决了：</p>
<figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public <span class="class"><span class="keyword">class</span> <span class="title">LiftAllTransformer</span> <span class="title">implements</span> <span class="title">Observable</span>.<span class="title">Transformer</span>&lt;<span class="title">Integer</span>, <span class="title">String</span>&gt; &#123;</span></div><div class="line">    @<span class="type">Override</span></div><div class="line">    public <span class="type">Observable</span>&lt;<span class="type">String</span>&gt; call(<span class="type">Observable</span>&lt;<span class="type">Integer</span>&gt; observable) &#123;</div><div class="line">        <span class="keyword">return</span> observable</div><div class="line">            .lift1()</div><div class="line">            .lift2()</div><div class="line">            .lift3()</div><div class="line">            .lift4();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">...</div><div class="line"><span class="type">Transformer</span> liftAll = <span class="function"><span class="keyword">new</span> <span class="title">LiftAllTransformer</span>();</span></div><div class="line"><span class="title">observable1</span>.<span class="title">compose</span>(liftAll).<span class="title">subscribe</span>(subscriber1);</div><div class="line"><span class="title">observable2</span>.<span class="title">compose</span>(liftAll).<span class="title">subscribe</span>(subscriber2);</div><div class="line"><span class="title">observable3</span>.<span class="title">compose</span>(liftAll).<span class="title">subscribe</span>(subscriber3);</div><div class="line"><span class="title">observable4</span>.<span class="title">compose</span>(liftAll).<span class="title">subscribe</span>(subscriber4);</div></pre></td></tr></table></figure>
<p>像上面这样，使用 compose() 方法，Observable 可以利用传入的 Transformer 对象的 call 方法直接对自身进行处理，也就不必被包在方法的里面了。</p>
<p>compose() 的原理比较简单，不附图喽。</p>
<h2 id="线程控制：Scheduler高级"><a href="#线程控制：Scheduler高级" class="headerlink" title="线程控制：Scheduler高级"></a>线程控制：Scheduler高级</h2><p>除了灵活的变换，RxJava 另一个牛逼的地方，就是线程的自由控制。</p>
<p>1) Scheduler 高级的 API</p>
<p>前面讲到了，可以利用 subscribeOn() 结合 observeOn() 来实现线程控制，让事件的产生和消费发生在不同的线程。可是在了解了map() flatMap() 等变换方法后，有些好事的（其实就是当初刚接触 RxJava 时的我）就问了：能不能多切换几次线程？</p>
<p>答案是：能。因为 observeOn() 指定的是 Subscriber 的线程，而这个 Subscriber 并不是（严格说应该为『不一定是』，但这里不妨理解为『不是』）subscribe() 参数中的 Subscriber ，而是 observeOn() 执行时的当前 Observable 所对应的 Subscriber ，即它的直接下级 Subscriber 。换句话说，observeOn() 指定的是它之后的操作所在的线程。因此如果有多次切换线程的需求，只要在每个想要切换线程的位置调用一次 observeOn() 即可。上代码：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Observable</span><span class="selector-class">.just</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) <span class="comment">// IO 线程，由 subscribeOn() 指定</span></div><div class="line">    <span class="selector-class">.subscribeOn</span>(Schedulers.io())</div><div class="line">    <span class="selector-class">.observeOn</span>(Schedulers.newThread())</div><div class="line">    <span class="selector-class">.map</span>(mapOperator) <span class="comment">// 新线程，由 observeOn() 指定</span></div><div class="line">    <span class="selector-class">.observeOn</span>(Schedulers.io())</div><div class="line">    <span class="selector-class">.map</span>(mapOperator2) <span class="comment">// IO 线程，由 observeOn() 指定</span></div><div class="line">    <span class="selector-class">.observeOn</span>(AndroidSchedulers.mainThread)</div><div class="line">    <span class="selector-class">.subscribe</span>(subscriber);  <span class="comment">// Android 主线程，由 observeOn() 指定</span></div></pre></td></tr></table></figure>
<p>如上，通过 observeOn() 的多次调用，程序实现了线程的多次切换。</p>
<p>不过，不同于 observeOn() ， subscribeOn() 的位置放在哪里都可以，但它是只能调用一次的。</p>
<p>又有好事的（其实还是当初的我）问了：如果我非要调用多次 subscribeOn() 呢？会有什么效果？</p>
<p>这个问题先放着，我们还是从 RxJava 线程控制的原理说起吧。</p>
<p>2) Scheduler 的原理（二）</p>
<p>其实， subscribeOn() 和 observeOn() 的内部实现，也是用的 lift()。具体看图（不同颜色的箭头表示不同的线程）：</p>
<p>subscribeOn() 原理图：</p>
<p><img src="http://www.jcodecraeer.com/uploads/20151012/1444623691419731.png" alt="subscribeOn 原理图"></p>
<p>observeOn() 原理图：</p>
<p><img src="http://www.jcodecraeer.com/uploads/20151012/1444623692100418.png" alt="observeOn 原理"></p>
<p>从图中可以看出，subscribeOn() 和 observeOn() 都做了线程切换的工作（图中的 “schedule…” 部位）。不同的是， subscribeOn()的线程切换发生在 OnSubscribe 中，即在它通知上一级 OnSubscribe 时，这时事件还没有开始发送，因此 subscribeOn() 的线程控制可以从事件发出的开端就造成影响；而 observeOn() 的线程切换则发生在它内建的 Subscriber 中，即发生在它即将给下一级Subscriber 发送事件时，因此 observeOn() 控制的是它后面的线程。</p>
<p>最后，我用一张图来解释当多个 subscribeOn() 和 observeOn() 混合使用时，线程调度是怎么发生的（由于图中对象较多，相对于上面的图对结构做了一些简化调整）：</p>
<p>线程控制综合调用</p>
<p><img src="http://www.jcodecraeer.com/uploads/20151012/1444623692109042.png" alt="线程控制综合调用"></p>
<p>图中共有 5 处含有对事件的操作。由图中可以看出，①和②两处受第一个 subscribeOn() 影响，运行在红色线程；③和④处受第一个observeOn() 的影响，运行在绿色线程；⑤处受第二个 onserveOn() 影响，运行在紫色线程；而第二个 subscribeOn() ，由于在通知过程中线程就被第一个 subscribeOn() 截断，因此对整个流程并没有任何影响。这里也就回答了前面的问题：当使用了多个subscribeOn() 的时候，只有第一个 subscribeOn() 起作用。</p>
<p>3) 延伸：doOnSubscribe()</p>
<p>然而，虽然超过一个的 subscribeOn() 对事件处理的流程没有影响，但在流程之前却是可以利用的。</p>
<p>在前面讲 Subscriber 的时候，提到过 Subscriber 的 onStart() 可以用作流程开始前的初始化。然而 onStart() 由于在subscribe() 发生时就被调用了，因此不能指定线程，而是只能执行在 subscribe() 被调用时的线程。这就导致如果 onStart() 中含有对线程有要求的代码（例如在界面上显示一个 ProgressBar，这必须在主线程执行），将会有线程非法的风险，因为有时你无法预测subscribe() 将会在什么线程执行。</p>
<p>而与 Subscriber.onStart() 相对应的，有一个方法 Observable.doOnSubscribe() 。它和 Subscriber.onStart() 同样是在subscribe() 调用后而且在事件发送前执行，但区别在于它可以指定线程。默认情况下， doOnSubscribe() 执行在 subscribe() 发生的线程；而如果在 doOnSubscribe() 之后有 subscribeOn() 的话，它将执行在离它最近的 subscribeOn() 所指定的线程。</p>
<p>示例代码：</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Observable</span><span class="selector-class">.create</span>(onSubscribe)</div><div class="line">    <span class="selector-class">.subscribeOn</span>(Schedulers.io())</div><div class="line">    <span class="selector-class">.doOnSubscribe</span>(new Action0() &#123;</div><div class="line">        <span class="variable">@Override</span></div><div class="line">        public void call() &#123;</div><div class="line">            <span class="selector-tag">progressBar</span><span class="selector-class">.setVisibility</span>(View.VISIBLE); <span class="comment">// 需要在主线程执行</span></div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">    <span class="selector-class">.subscribeOn</span>(AndroidSchedulers.mainThread()) <span class="comment">// 指定主线程</span></div><div class="line">    <span class="selector-class">.observeOn</span>(AndroidSchedulers.mainThread())</div><div class="line">    <span class="selector-class">.subscribe</span>(subscriber);</div></pre></td></tr></table></figure>
<p>如上，在 doOnSubscribe()的后面跟一个 subscribeOn() ，就能指定准备工作的线程了。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>此篇博文是RxJava最基本的介绍了，相信大家对RxJava有了初步的认识，接下来会对RXJava的应用场景进行分析~</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
            <category> Java </category>
            
        </categories>
        
        
        <tags>
            
            <tag> RxJava </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Retrofit 2.0 官方文档]]></title>
      <url>https://walid1992.github.io/2016/08/25/Retrofit-2-0-%E5%AE%98%E6%96%B9%E6%96%87%E6%A1%A3/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>来自<a href="https://github.com/square/retrofit" target="_blank" rel="external">移动支付公司square</a>公司的作品，<a href="http://www.csdn.net/article/2014-02-10/2818351-open-source-5-companies-code-projects" target="_blank" rel="external">开源世界top5的最小公司</a>，首先我自己是一个忠实广场粉，okhttp、picasso、greendao、okio等等~ 据Square CTO Bob Lee的说法，Square已经将超过60个项目提交到开源社区，贡献了25万行左右的代码。</p>
<p><strong>原文：<a href="http://inthecheesefactory.com/blog/retrofit-2.0/en" target="_blank" rel="external">Retrofit 2.0: The biggest update yet on the best HTTP Client Library for Android</a></strong></p>
<p>因为其简单与出色的性能，Retrofit 是安卓上最流行的HTTP Client库之一。</p>
<p>不过它的缺点是在Retrofit 1.x中没有直接取消正在进行中任务的方法。如果你想做这件事必须手动杀死，而这并不好实现。</p>
<p>Square几年前曾许诺这个功能将在Retrofit 2.0实现，但是几年过去了仍然没有在这个问题上有所更新。</p>
<p>API 声明</p>
<p>接口函数的注解和参数表明如何去处理请求 请求方法</p>
<p>每一个函数都必须有提供请求方式和相对URL的Http注解，Retrofit提供了5种内置的注解：GET、POST、PUT、DELETE和HEAD，在注解中指定的资源的相对URL</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">GET</span>("<span class="keyword">users</span>/<span class="keyword">list</span>")</div></pre></td></tr></table></figure>
<p>也可以在URL中指定查询参数</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">GET</span>("<span class="keyword">users</span>/<span class="keyword">list</span>?<span class="keyword">sort</span>=<span class="keyword">desc</span>")</div></pre></td></tr></table></figure>
<p>URL处理</p>
<p>请求的URL可以在函数中使用替换块和参数进行动态更新，替换块是{ and }包围的字母数字组成的字符串，相应的参数必须使用相同的字符串被@Path进行注释</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@GET</span>(<span class="string">"group/&#123;id&#125;/users"</span>)</div><div class="line">List&lt;User&gt; groupList(<span class="variable">@Path</span>(<span class="string">"id"</span>) int groupId);</div></pre></td></tr></table></figure>
<p>也可以添加查询参数</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@GET</span>(<span class="string">"group/&#123;id&#125;/users"</span>)</div><div class="line">List&lt;User&gt; groupList(<span class="variable">@Path</span>(<span class="string">"id"</span>) int groupId, <span class="variable">@Query</span>(<span class="string">"sort"</span>) String sort);</div></pre></td></tr></table></figure>
<p>复杂的查询参数可以使用Map进行组合</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@GET</span>(<span class="string">"group/&#123;id&#125;/users"</span>)</div><div class="line">List&lt;User&gt; groupList(<span class="variable">@Path</span>(<span class="string">"id"</span>) int groupId, <span class="variable">@QueryMap</span> Map&lt;String, String&gt; options);</div></pre></td></tr></table></figure>
<p>请求体</p>
<p>可以通过@Body注解指定一个对象作为Http请求的请求体</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@POST</span>(<span class="string">"users/new"</span>)</div><div class="line">Call&lt;User&gt; createUser(<span class="variable">@Body</span> User user);</div></pre></td></tr></table></figure>
<p>该对象将会被Retroofit实例指定的转换器转换，如果没有添加转换器，则只有RequestBody可用。（转换器的添加在后面介绍） FORM ENCODED 和 MULTIPART</p>
<p>函数也可以声明为发送form-encoded和multipart数据。 当函数有@FormUrlEncoded注解的时候，将会发送form-encoded数据，每个键-值对都要被含有名字的@Field注解和提供值的对象所标注</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@FormUrlEncoded</span></div><div class="line"><span class="variable">@POST</span>(<span class="string">"user/edit"</span>)</div><div class="line">Call&lt;User&gt; updateUser(<span class="variable">@Field</span>(<span class="string">"first_name"</span>) String first, <span class="variable">@Field</span>(<span class="string">"last_name"</span>) String last);</div></pre></td></tr></table></figure>
<p>当函数有@Multipart注解的时候，将会发送multipart数据，Parts都使用@Part注解进行声明</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@Multipart</span></div><div class="line"><span class="variable">@PUT</span>(<span class="string">"user/photo"</span>)</div><div class="line">Call&lt;User&gt; updateUser(<span class="variable">@Part</span>(<span class="string">"photo"</span>) RequestBody photo, <span class="variable">@Part</span>(<span class="string">"description"</span>) RequestBody description);</div></pre></td></tr></table></figure>
<p>Multipart parts要使用Retrofit的众多转换器之一或者实现RequestBody来处理自己的序列化。 Header处理</p>
<p>可以使用@Headers注解给函数设置静态的header</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@Headers</span>(<span class="string">"Cache-Control: max-age=640000"</span>)</div><div class="line"><span class="variable">@GET</span>(<span class="string">"widget/list"</span>)</div><div class="line">Call&lt;List&lt;Widget&gt;&gt; widgetList();</div><div class="line"></div><div class="line"><span class="variable">@Headers</span>(&#123;</div><div class="line">    <span class="string">"Accept: application/vnd.github.v3.full+json"</span>,</div><div class="line">    <span class="string">"User-Agent: Retrofit-Sample-App"</span></div><div class="line">&#125;)</div><div class="line"><span class="variable">@GET</span>(<span class="string">"users/&#123;username&#125;"</span>)</div><div class="line">Call&lt;User&gt; getUser(<span class="variable">@Path</span>(<span class="string">"username"</span>) String username);</div></pre></td></tr></table></figure>
<p>需要注意的是：header不能被互相覆盖。所有具有相同名字的header将会被包含到请求中。</p>
<p>可以使用@Header注解动态的更新一个请求的header。必须给@Header提供相应的参数，如果参数的值为空header将会被忽略，否则就调用参数值的toString()方法并使用返回结果</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@GET</span>(<span class="string">"user"</span>)</div><div class="line">Call&lt;User&gt; getUser(<span class="variable">@Header</span>(<span class="string">"Authorization"</span>) String authorization)</div></pre></td></tr></table></figure>
<p>使用OkHttp拦截器可以指定需要的header给每一个Http请求</p>
<figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="type">OkHttpClient</span> client = <span class="function"><span class="keyword">new</span> <span class="title">OkHttpClient</span>();</span></div><div class="line"><span class="title">client</span>.<span class="title">networkInterceptors</span>().<span class="title">add</span>(new <span class="type">Interceptor</span>() &#123;</div><div class="line">    @<span class="title">Override</span></div><div class="line">    <span class="title">public</span> <span class="title">com</span>.<span class="title">squareup</span>.<span class="title">okhttp</span>.<span class="title">Response</span> <span class="title">intercept</span>(<span class="type">Chain</span> chain) <span class="title">throws</span> <span class="title">IOException</span> &#123;</div><div class="line">        <span class="title">com</span>.<span class="title">squareup</span>.<span class="title">okhttp</span>.<span class="title">Response</span> <span class="title">response</span> = <span class="title">chain</span>.<span class="title">proceed</span>(chain.request());</div><div class="line">        <span class="comment">// Do anything with response here</span></div><div class="line"></div><div class="line">        <span class="title">return</span> <span class="title">response</span>;</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="title">Retrofit</span> <span class="title">retrofit</span> = <span class="title">new</span> <span class="title">Retrofit</span>.<span class="title">Builder</span>()</div><div class="line">        .<span class="title">baseUrl</span>(<span class="type">BASE_URL</span>)</div><div class="line">        ...</div><div class="line">        .<span class="title">client</span>(client)</div><div class="line">        .<span class="title">build</span>();</div></pre></td></tr></table></figure>
<p>新的Service定义方式，不再有同步和异步之分 关于在Retrofit 1.9中service 接口的定义，如果你想定义一个同步的函数，你应该这样定义：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Synchronous in Retrofit 1.9 */</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">APIService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@POST</span>(<span class="string">"/list"</span>)</div><div class="line">    <span class="function">Repo <span class="title">loadRepo</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而定义一个异步的则是这样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* Asynchronous in Retrofit 1.9 */</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">APIService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@POST</span>(<span class="string">"/list"</span>)</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">loadRepo</span><span class="params">(Callback&lt;Repo&gt; cb)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是在Retrofit 2.0上，只能定义一个模式，因此要简单得多。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> retrofit.Call;</div><div class="line"></div><div class="line"><span class="comment">/* Retrofit 2.0 */</span></div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">APIService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@POST</span>(<span class="string">"/list"</span>)</div><div class="line">    <span class="function">Call&lt;Repo&gt; <span class="title">loadRepo</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>而创建service 的方法也变得和OkHttp的模式一模一样。如果要调用同步请求，只需调用execute；而发起一个异步请求则是调用enqueue。</p>
<p>同步请求</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// Synchronous <span class="built_in">Call</span> <span class="keyword">in</span> Retrofit <span class="number">2.0</span></div><div class="line"></div><div class="line"><span class="built_in">Call</span>&lt;Repo&gt; <span class="built_in">call</span> = service.loadRepo()<span class="comment">;</span></div><div class="line">Repo repo = <span class="built_in">call</span>.<span class="built_in">execute</span>()<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>以上的代码会阻塞线程，因此你不能在安卓的主线程中调用，不然会面临NetworkOnMainThreadException。如果你想调用execute方法，请在后台线程执行。</p>
<p>异步请求</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// Synchronous <span class="keyword">Call</span> <span class="keyword">in</span> Retrofit <span class="number">2.0</span></div><div class="line"></div><div class="line"><span class="keyword">Call</span>&lt;Repo&gt; <span class="keyword">call</span> = service.loadRepo();</div><div class="line">call.enqueue(<span class="keyword">new</span> Callback&lt;Repo&gt;() &#123;</div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="built_in">void</span> onResponse(Response&lt;Repo&gt; response) &#123;</div><div class="line">        // <span class="keyword">Get</span> <span class="keyword">result</span> Repo <span class="keyword">from</span> response.body()</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    <span class="keyword">public</span> <span class="built_in">void</span> onFailure(Throwable t) &#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>以上代码发起了一个在后台线程的请求并从response 的response.body()方法中获取一个结果对象。注意这里的onResponse和onFailure方法是在主线程中调用的。</p>
<p>我建议你使用enqueue，它最符合 Android OS的习惯。</p>
<p>取消正在进行中的业务 service 的模式变成Call的形式的原因是为了让正在进行的事务可以被取消。要做到这点，你只需调用call.cancel()。</p>
<p>call.cancel(); 事务将会在之后立即被取消。好简单嘿嘿！</p>
<p>Converter现在从Retrofit中删除 在Retrofit 1.9中，GsonConverter 包含在了package 中而且自动在RestAdapter创建的时候被初始化。这样来自服务器的son结果会自动解析成定义好了的Data Access Object（DAO）</p>
<p>但是在Retrofit 2.0中，Converter 不再包含在package 中了。你需要自己插入一个Converter 不然的话Retrofit 只能接收字符串结果。同样的，Retrofit 2.0也不再依赖于Gson 。</p>
<p>如果你想接收json 结果并解析成DAO，你必须把Gson Converter 作为一个独立的依赖添加进来。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.squareup.retrofit:converter-gson:2.0.0-beta1'</span></div></pre></td></tr></table></figure>
<p>然后使用addConverterFactory把它添加进来。注意RestAdapter的别名仍然为Retrofit。</p>
<figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="type">Retrofit</span> retrofit = <span class="function"><span class="keyword">new</span> <span class="title">Retrofit</span>.<span class="title">Builder</span>()</span></div><div class="line">        .<span class="title">baseUrl</span>("http://api.nuuneoi.com/base/")</div><div class="line">        .<span class="title">addConverterFactory</span>(<span class="type">GsonConverterFactory</span>.create())</div><div class="line">        .<span class="title">build</span>();</div><div class="line"></div><div class="line"><span class="title">service</span> = <span class="title">retrofit</span>.<span class="title">create</span>(<span class="type">APIService</span>.class);</div></pre></td></tr></table></figure>
<p>这里是Square提供的官方Converter modules列表。选择一个最满足你需求的。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">Gson</span>: <span class="selector-tag">com</span><span class="selector-class">.squareup</span><span class="selector-class">.retrofit</span><span class="selector-pseudo">:converter-gson</span></div><div class="line"><span class="selector-tag">Jackson</span>: <span class="selector-tag">com</span><span class="selector-class">.squareup</span><span class="selector-class">.retrofit</span><span class="selector-pseudo">:converter-jackson</span></div><div class="line"><span class="selector-tag">Moshi</span>: <span class="selector-tag">com</span><span class="selector-class">.squareup</span><span class="selector-class">.retrofit</span><span class="selector-pseudo">:converter-moshi</span></div><div class="line"><span class="selector-tag">Protobuf</span>: <span class="selector-tag">com</span><span class="selector-class">.squareup</span><span class="selector-class">.retrofit</span><span class="selector-pseudo">:converter-protobuf</span></div><div class="line"><span class="selector-tag">Wire</span>: <span class="selector-tag">com</span><span class="selector-class">.squareup</span><span class="selector-class">.retrofit</span><span class="selector-pseudo">:converter-wire</span></div><div class="line"><span class="selector-tag">Simple</span> <span class="selector-tag">XML</span>: <span class="selector-tag">com</span><span class="selector-class">.squareup</span><span class="selector-class">.retrofit</span><span class="selector-pseudo">:converter-simplexml</span></div></pre></td></tr></table></figure>
<p>你也可以通过实现Converter.Factory接口来创建一个自定义的converter 。</p>
<p>我比较赞同这种新的模式。它让Retrofit对自己要做的事情看起来更清晰。</p>
<p>自定义Gson对象 为了以防你需要调整json里面的一些格式，比如，Date Format。你可以创建一个Gson 对象并把它传递给GsonConverterFactory.create()。</p>
<figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="type">Gson</span> gson = <span class="function"><span class="keyword">new</span> <span class="title">GsonBuilder</span>()</span></div><div class="line">        .<span class="title">setDateFormat</span>("yyyy-<span class="type">MM</span>-dd'<span class="type">T</span>'<span class="type">HH</span>:mm:ssZ")</div><div class="line">        .<span class="title">create</span>();</div><div class="line"></div><div class="line"><span class="title">Retrofit</span> <span class="title">retrofit</span> = <span class="title">new</span> <span class="title">Retrofit</span>.<span class="title">Builder</span>()</div><div class="line">        .<span class="title">baseUrl</span>("http://api.nuuneoi.com/base/")</div><div class="line">        .<span class="title">addConverterFactory</span>(<span class="type">GsonConverterFactory</span>.create(gson))</div><div class="line">        .<span class="title">build</span>();</div><div class="line"></div><div class="line"><span class="title">service</span> = <span class="title">retrofit</span>.<span class="title">create</span>(<span class="type">APIService</span>.class);</div></pre></td></tr></table></figure>
<p>完成。</p>
<p>新的URL定义方式 Retrofit 2.0使用了新的URL定义方式。Base URL与@Url 不是简单的组合在一起而是和”<a href="...">“的处理方式一致。用下面的几个例子阐明。</a></p>
<p>[1、ps：貌似第二个才符合习惯。</p>
<p>对于 Retrofit 2.0中新的URL定义方式，这里是我的建议：</p>
<ul>
<li><p>Base URL: 总是以 /结尾</p>
</li>
<li><p>@Url: 不要以 / 开头</p>
</li>
</ul>
<p>比如</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">APIService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@POST</span>(<span class="string">"user/list"</span>)</div><div class="line">    <span class="function">Call&lt;Users&gt; <span class="title">loadUsers</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</div><div class="line">    Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</div><div class="line">            .baseUrl(<span class="string">"http://api.nuuneoi.com/base/"</span>)</div><div class="line">            .addConverterFactory(GsonConverterFactory.create())</div><div class="line">            .build();</div><div class="line"></div><div class="line">    APIService service = retrofit.create(APIService.class);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上代码中的loadUsers会从 <a href="http://api.nuuneoi.com/base/user/list获取数据。" target="_blank" rel="external">http://api.nuuneoi.com/base/user/list获取数据。</a></p>
<p>而且在Retrofit 2.0中我们还可以在@Url里面定义完整的URL：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">APIService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@POST</span>(<span class="string">"http://api.nuuneoi.com/special/user/list"</span>)</div><div class="line">    <span class="function">Call&lt;Users&gt; <span class="title">loadSpecialUsers</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种情况下Base URL会被忽略。</p>
<p>可以看到在URL的处理方式上发生了很大变化。它和前面的版本完全不同。如果你想把代码迁移到Retrofit 2.0，别忘了修正URL部分的代码。</p>
<p>现在需要OkHttp的支持 OkHttp 在Retrofit 1.9里是可选的。如果你想让Retrofit 使用OkHttp 作为HTTP 连接接口，你需要手动包含okhttp 依赖。</p>
<p>但是在Retrofit 2.0中，OkHttp 是必须的，并且自动设置为了依赖。下面的代码是从Retrofit 2.0的pom文件中抓取的。你不需要再做任何事情了。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.squareup.okhttp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>okhttp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">  ...</div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<p>为了让OkHttp 的Call模式成为可能，在Retrofit 2.0中OkHttp 自动被用作HTTP 接口。</p>
<p>即使response存在问题onResponse依然被调用 在Retrofit 1.9中，如果获取的 response 不能背解析成定义好的对象，则会调用failure。但是在Retrofit 2.0中，不管 response 是否能被解析。onResponse总是会被调用。但是在结果不能被解析的情况下，response.body()会返回null。别忘了处理这种情况。</p>
<p>如果response存在什么问题，比如404什么的，onResponse也会被调用。你可以从response.errorBody().string()中获取错误信息的主体。</p>
<p>Response/Failure 逻辑和Retrofit 1.9差别很大。如果你决定迁移到Retrofit 2.0，注意小心谨慎的处理这些情况。</p>
<p>缺少INTERNET权限会导致SecurityException异常 在Retrofit 1.9中，如果你忘记在AndroidManifest.xml文件中添加INTERNET权限。异步请求会直接进入failure回调方法，得到PERMISSION DENIED 错误消息。没有任何异常被抛出。</p>
<p>但是在Retrofit 2.0中，当你调用call.enqueue或者call.execute，将立即抛出SecurityException，如果你不使用try-catch会导致崩溃。</p>
<p>这类似于在手动调用HttpURLConnection时候的行为。不过这不是什么大问题，因为当INTERNET权限添加到了 AndroidManifest.xml中就没有什么需要考虑的了。</p>
<p>Use an Interceptor from OkHttp 在Retrofit 1.9中，你可以使用RequestInterceptor来拦截一个请求，但是它已经从Retrofit 2.0 移除了，因为HTTP连接层已经转为OkHttp。</p>
<p>结果就是，现在我们必须转而使用OkHttp里面的Interceptor。首先你需要使用Interceptor创建一个OkHttpClient对象，如下：</p>
<figure class="highlight aspectj"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">OkHttpClient client = <span class="keyword">new</span> OkHttpClient();</div><div class="line">client.interceptors().add(<span class="keyword">new</span> Interceptor() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="function">Response <span class="title">intercept</span><span class="params">(Chain chain)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">        Response response = chain.<span class="keyword">proceed</span>(chain.request());</div><div class="line"></div><div class="line">        <span class="comment">// Do anything with response here</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> response;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>然后传递创建的client到Retrofit的Builder链中。</p>
<figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="type">Retrofit</span> retrofit = <span class="function"><span class="keyword">new</span> <span class="title">Retrofit</span>.<span class="title">Builder</span>()</span></div><div class="line">        .<span class="title">baseUrl</span>("http://api.nuuneoi.com/base/")</div><div class="line">        .<span class="title">addConverterFactory</span>(<span class="type">GsonConverterFactory</span>.create())</div><div class="line">        .<span class="title">client</span>(client)</div><div class="line">        .<span class="title">build</span>();</div></pre></td></tr></table></figure>
<p>以上为全部内容。</p>
<p>学习关于OkHttp Interceptor的知识，请到OkHttp Interceptors。</p>
<p>RxJava Integration with CallAdapter 除了使用Call模式来定义接口，我们也可以定义自己的type，比如MyCall。。我们把Retrofit 2.0的这个机制称为CallAdapter。</p>
<p>Retrofit团队有已经准备好了的CallAdapter module。其中最著名的module可能是为RxJava准备的CallAdapter，它将作为Observable返回。要使用它，你的项目依赖中必须包含两个modules。</p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">compile</span> <span class="string">'com.squareup.retrofit:adapter-rxjava:2.0.0-beta1'</span></div><div class="line"><span class="keyword">compile</span> <span class="string">'io.reactivex:rxandroid:1.0.1'</span></div></pre></td></tr></table></figure>
<p>Sync Gradle并在Retrofit Builder链表中如下调用addCallAdapterFactory：</p>
<figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="type">Retrofit</span> retrofit = <span class="function"><span class="keyword">new</span> <span class="title">Retrofit</span>.<span class="title">Builder</span>()</span></div><div class="line">        .<span class="title">baseUrl</span>("http://api.nuuneoi.com/base/")</div><div class="line">        .<span class="title">addConverterFactory</span>(<span class="type">GsonConverterFactory</span>.create())</div><div class="line">        .<span class="title">addCallAdapterFactory</span>(<span class="type">RxJavaCallAdapterFactory</span>.create())</div><div class="line">        .<span class="title">build</span>();</div></pre></td></tr></table></figure>
<p>你的Service接口现在可以作为Observable返回了！</p>
<figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="type">Retrofit</span> retrofit = <span class="function"><span class="keyword">new</span> <span class="title">Retrofit</span>.<span class="title">Builder</span>()</span></div><div class="line">        .<span class="title">baseUrl</span>("http://api.nuuneoi.com/base/")</div><div class="line">        .<span class="title">addConverterFactory</span>(<span class="type">GsonConverterFactory</span>.create())</div><div class="line">        .<span class="title">addCallAdapterFactory</span>(<span class="type">RxJavaCallAdapterFactory</span>.create())</div><div class="line">        .<span class="title">build</span>();</div></pre></td></tr></table></figure>
<p>你可以完全像RxJava那样使用它，如果你想让subscribe部分的代码在主线程被调用，需要把observeOn(AndroidSchedulers.mainThread())添加到链表中。</p>
<figure class="highlight pony"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="type">Observable</span>&lt;<span class="type">DessertItemCollectionDao</span>&gt; observable = service.loadDessertListRx();</div><div class="line"></div><div class="line">observable.observeOn(<span class="type">AndroidSchedulers</span>.mainThread())</div><div class="line">    .subscribe(<span class="function"><span class="keyword">new</span> <span class="title">Subscriber</span>&lt;<span class="title">DessertItemCollectionDao</span>&gt;() &#123;</span></div><div class="line">        @<span class="title">Override</span></div><div class="line">        <span class="title">public</span> <span class="title">void</span> <span class="title">onCompleted</span>() &#123;</div><div class="line">            <span class="title">Toast</span>.<span class="title">makeText</span>(getApplicationContext(),</div><div class="line">                    "<span class="title">Completed</span>",</div><div class="line">                    <span class="title">Toast</span>.<span class="title">LENGTH_SHORT</span>)</div><div class="line">                .<span class="title">show</span>();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @<span class="title">Override</span></div><div class="line">        <span class="title">public</span> <span class="title">void</span> <span class="title">onError</span>(<span class="type">Throwable</span> e) &#123;</div><div class="line">            <span class="title">Toast</span>.<span class="title">makeText</span>(getApplicationContext(),</div><div class="line">                    <span class="title">e</span>.<span class="title">getMessage</span>(),</div><div class="line">                    <span class="title">Toast</span>.<span class="title">LENGTH_SHORT</span>)</div><div class="line">                .<span class="title">show</span>();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @<span class="title">Override</span></div><div class="line">        <span class="title">public</span> <span class="title">void</span> <span class="title">onNext</span>(<span class="type">DessertItemCollectionDao</span> dessertItemCollectionDao) &#123;</div><div class="line">            <span class="title">Toast</span>.<span class="title">makeText</span>(getApplicationContext(),</div><div class="line">                    <span class="title">dessertItemCollectionDao</span>.<span class="title">getData</span>().<span class="title">get</span>(<span class="number">0</span>).<span class="title">getName</span>(),</div><div class="line">                    <span class="title">Toast</span>.<span class="title">LENGTH_SHORT</span>)</div><div class="line">                .<span class="title">show</span>();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<p>完成！我相信RxJava的粉丝对这个变化相当满意。</p>
<p>总结 还有许多其他变化，你可以在官方的Change Log 中获取更多详情。不过，我相信我已经在本文涵盖了主要的issues。</p>
<p>你可能会好奇现在是否是切换到Retrofit 2.0 的时机？考虑到它仍然是beta阶段，你可能会希望继续停留在1.9除非你跟我一样是一个喜欢尝鲜的人。 Retrofit 2.0用起来很好据我的经验来看还没有发现bug。</p>
<p>注意Retrofit 1.9 的官方文档现在已经从Square的github主页删除。我建议你现在就开始学习Retrofit 2.0，尽快使用最新版本。](…)</p>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Android </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
